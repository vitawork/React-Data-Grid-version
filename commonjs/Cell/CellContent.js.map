{"version":3,"file":"CellContent.js","sourceRoot":"","sources":["../../src/Cell/CellContent.tsx"],"names":[],"mappings":";;;AAAA,wDAA0B;AAC1B,kEAAoC;AAEpC,yFAA2D;AAE3D,kEAAoC;AAiBpC,SAAwB,WAAW,CAAI,EAAsG;IAApG,IAAA,YAAG,EAAE,oBAAO,EAAE,wCAAiB,EAAE,kBAAM,EAAE,8BAAY,EAAE,8BAAY,EAAE,6GAAQ;IAC5G,IAAA,qBAAM,CAAW;IACzB,IAAM,YAAY,GAAG,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,KAAK,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;IACxF,IAAM,SAAS,GAAG,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACtE,IAAM,UAAU,GAAG,iBAAiB,IAAI,YAAY,CAAC,CAAC,CAAC,iBAAiB,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5F,SAAS,kBAAkB;QACzB,IAAI,YAAY,CAAC,cAAc,EAAE;YAC/B,YAAY,CAAC,cAAc,CAAC;gBAC1B,GAAG,KAAA;gBACH,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,UAAU,EAAE,iBAAiB;aAC9B,CAAC,CAAC;SACJ;IACH,CAAC;IAED,IAAM,WAAW,GAAG,iBAAiB,IAAI,SAAS,GAAG,CAAC,IAAI,YAAY,IAAI,CACxE,8BAAC,8BAAoB,IACnB,SAAS,EAAE,SAAS,EACpB,UAAU,EAAE,MAAM,EAClB,cAAc,EAAE,kBAAkB,EAClC,qBAAqB,EAAE,CAAC,CAAC,YAAY,CAAC,cAAc,GACpD,CACH,CAAC;IAEF,IAAM,OAAO,GAAG,oBAAU,CAAC,wBAAwB,EACjD,EAAE,cAAc,EAAE,CAAC,CAAC,OAAO,EAAE,CAC9B,CAAC;IAEF,OAAO,CACL,uCAAK,SAAS,EAAE,OAAO;QACpB,WAAW;QACZ,uCAAK,SAAS,EAAC,4BAA4B,EAAC,KAAK,EAAE,EAAE,UAAU,YAAA,EAAE;YAC/D;gBAAM,8BAAC,mBAAS,uBAAQ,KAAK,EAAI,CAAO;YACvC,YAAY,CACT;QACL,OAAO,IAAI,wCAAM,SAAS,EAAC,mBAAmB,IAAE,OAAO,CAAQ,CAC5D,CACP,CAAC;AACJ,CAAC;AAxCD,8BAwCC","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport ChildRowDeleteButton from '../ChildRowDeleteButton';\nimport { Props as CellProps } from '../Cell';\nimport CellValue from './CellValue';\n\nexport type CellContentProps<R> = Pick<CellProps<R>,\n'idx'\n| 'rowIdx'\n| 'rowData'\n| 'column'\n| 'value'\n| 'isScrolling'\n| 'expandableOptions'\n| 'tooltip'\n| 'height'\n| 'cellControls'\n| 'cellMetaData'\n>;\n\n\nexport default function CellContent<R>({ idx, tooltip, expandableOptions, height, cellMetaData, cellControls, ...props }: CellContentProps<R>) {\n  const { column } = props;\n  const isExpandCell = expandableOptions ? expandableOptions.field === column.key : false;\n  const treeDepth = expandableOptions ? expandableOptions.treeDepth : 0;\n  const marginLeft = expandableOptions && isExpandCell ? expandableOptions.treeDepth * 30 : 0;\n\n  function handleDeleteSubRow() {\n    if (cellMetaData.onDeleteSubRow) {\n      cellMetaData.onDeleteSubRow({\n        idx,\n        rowIdx: props.rowIdx,\n        rowData: props.rowData,\n        expandArgs: expandableOptions\n      });\n    }\n  }\n\n  const cellDeleter = expandableOptions && treeDepth > 0 && isExpandCell && (\n    <ChildRowDeleteButton\n      treeDepth={treeDepth}\n      cellHeight={height}\n      onDeleteSubRow={handleDeleteSubRow}\n      isDeleteSubRowEnabled={!!cellMetaData.onDeleteSubRow}\n    />\n  );\n\n  const classes = classNames('react-grid-Cell__value',\n    { 'cell-tooltip': !!tooltip }\n  );\n\n  return (\n    <div className={classes}>\n      {cellDeleter}\n      <div className=\"react-grid-Cell__container\" style={{ marginLeft }}>\n        <span><CellValue<R> {...props} /></span>\n        {cellControls}\n      </div>\n      {tooltip && <span className=\"cell-tooltip-text\">{tooltip}</span>}\n    </div>\n  );\n}\n"]}