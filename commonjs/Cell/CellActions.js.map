{"version":3,"file":"CellActions.js","sourceRoot":"","sources":["../../src/Cell/CellActions.tsx"],"names":[],"mappings":";;;AAAA,wDAA0B;AAE1B,oEAAsC;AAStC,SAAwB,WAAW,CAAI,EAAsD;QAApD,8BAAY,EAAE,kBAAM,EAAE,oBAAO;IACpE,IAAI,YAAY,CAAC,cAAc,EAAE;QAC/B,IAAM,iBAAiB,GAAG,YAAY,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACvE,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YACrD,IAAM,aAAa,GAAG,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK;gBACxD,OAAO,8BAAC,oBAAU,qBAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,KAAK,CAAC,IAAM,MAAM,EAAI,CAAC;YACtE,CAAC,CAAC,CAAC;YAEH,OAAO,8DAAG,aAAa,CAAI,CAAC;SAC7B;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAZD,8BAYC","sourcesContent":["import React from 'react';\n\nimport CellAction from './CellAction';\nimport { Props as CellProps } from '../Cell';\n\ntype CellActionsProps<R> = Pick<CellProps<R>,\n'cellMetaData'\n| 'column'\n| 'rowData'\n>;\n\nexport default function CellActions<R>({ cellMetaData, column, rowData }: CellActionsProps<R>) {\n  if (cellMetaData.getCellActions) {\n    const cellActionButtons = cellMetaData.getCellActions(column, rowData);\n    if (cellActionButtons && cellActionButtons.length > 0) {\n      const actionButtons = cellActionButtons.map((action, index) => {\n        return <CellAction key={index} isFirst={index === 0} {...action} />;\n      });\n\n      return <>{actionButtons}</>;\n    }\n  }\n  return null;\n}\n"]}