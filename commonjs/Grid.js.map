{"version":3,"file":"Grid.js","sourceRoot":"","sources":["../src/Grid.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Header from './Header';\nimport Viewport, { ScrollState } from './Viewport';\nimport { isFrozen } from './ColumnUtils';\nimport { HeaderRowData, CellMetaData, RowSelection, InteractionMasksMetaData, SelectedRow } from './common/types';\nimport { DEFINE_SORT } from './common/enums';\nimport { DataGridProps, DataGridState } from './ReactDataGrid';\nimport { EventBus } from './masks';\n\ntype SharedDataGridProps<R> = Pick<DataGridProps<R>,\n'rowKey'\n| 'draggableHeaderCell'\n| 'getValidFilterValues'\n| 'rowGetter'\n| 'rowsCount'\n| 'rowHeight'\n| 'rowRenderer'\n| 'rowGroupRenderer'\n| 'minHeight'\n| 'scrollToRowIndex'\n| 'contextMenu'\n| 'enableCellSelect'\n| 'enableCellAutoFocus'\n| 'cellNavigationMode'\n| 'onScroll'\n| 'RowsContainer'\n| 'emptyRowsView'\n| 'onHeaderDrop'\n| 'getSubRowDetails'\n| 'editorPortalTarget'\n>;\n\ntype SharedDataGridState<R> = Pick<DataGridState<R>,\n'columnMetrics'\n| 'sortColumn'\n| 'sortDirection'\n>;\n\nexport interface GridProps<R> extends SharedDataGridProps<R>, SharedDataGridState<R> {\n  headerRows: HeaderRowData<R>[];\n  cellMetaData: CellMetaData<R>;\n  selectedRows?: SelectedRow<R>[];\n  rowSelection?: RowSelection;\n  rowOffsetHeight: number;\n  onSort(columnKey: keyof R, sortDirection: DEFINE_SORT): void;\n  totalWidth: number | string;\n  onViewportKeydown(e: React.KeyboardEvent<HTMLDivElement>): void;\n  onViewportKeyup(e: React.KeyboardEvent<HTMLDivElement>): void;\n  onColumnResize(idx: number, width: number): void;\n  eventBus: EventBus;\n  interactionMasksMetaData: InteractionMasksMetaData<R>;\n}\n\nexport default class Grid<R> extends React.Component<GridProps<R>> {\n  static displayName = 'Grid';\n\n  private readonly header = React.createRef<Header<R>>();\n  private readonly viewport = React.createRef<Viewport<R>>();\n  private _scrollLeft?: number = undefined;\n\n  _onScroll() {\n    if (this._scrollLeft !== undefined) {\n      this.header.current!.setScrollLeft(this._scrollLeft);\n      if (this.viewport.current) {\n        this.viewport.current.setScrollLeft(this._scrollLeft);\n      }\n    }\n  }\n\n  areFrozenColumnsScrolledLeft(scrollLeft: number) {\n    return scrollLeft > 0 && this.props.columnMetrics.columns.some(c => isFrozen(c));\n  }\n\n  onScroll = (scrollState: ScrollState) => {\n    if (this.props.onScroll) {\n      this.props.onScroll(scrollState);\n    }\n    const { scrollLeft } = scrollState;\n    if (this._scrollLeft !== scrollLeft || this.areFrozenColumnsScrolledLeft(scrollLeft)) {\n      this._scrollLeft = scrollLeft;\n      this._onScroll();\n    }\n  };\n\n  componentDidMount() {\n    this._scrollLeft = this.viewport.current ? this.viewport.current.getScroll().scrollLeft : 0;\n    this._onScroll();\n  }\n\n  componentDidUpdate() {\n    this._onScroll();\n  }\n\n  render() {\n    const { headerRows } = this.props;\n    const EmptyRowsView = this.props.emptyRowsView;\n\n    return (\n      <div className=\"react-grid-Grid\" style={{ minHeight: this.props.minHeight }}>\n        <Header<R>\n          ref={this.header}\n          columnMetrics={this.props.columnMetrics}\n          onColumnResize={this.props.onColumnResize}\n          rowHeight={this.props.rowHeight}\n          totalWidth={this.props.totalWidth}\n          headerRows={headerRows}\n          sortColumn={this.props.sortColumn}\n          sortDirection={this.props.sortDirection}\n          draggableHeaderCell={this.props.draggableHeaderCell}\n          onSort={this.props.onSort}\n          onHeaderDrop={this.props.onHeaderDrop}\n          getValidFilterValues={this.props.getValidFilterValues}\n          cellMetaData={this.props.cellMetaData}\n        />\n        {this.props.rowsCount === 0 && isValidElementType(EmptyRowsView) ? (\n          <div className=\"react-grid-Empty\">\n            <EmptyRowsView />\n          </div>\n        ) : (\n          <div\n            onKeyDown={this.props.onViewportKeydown}\n            onKeyUp={this.props.onViewportKeyup}\n          >\n            <Viewport<R>\n              ref={this.viewport}\n              rowKey={this.props.rowKey}\n              rowHeight={this.props.rowHeight}\n              rowRenderer={this.props.rowRenderer}\n              rowGetter={this.props.rowGetter}\n              rowsCount={this.props.rowsCount}\n              selectedRows={this.props.selectedRows}\n              columnMetrics={this.props.columnMetrics}\n              totalWidth={this.props.totalWidth}\n              onScroll={this.onScroll}\n              cellMetaData={this.props.cellMetaData}\n              rowOffsetHeight={this.props.rowOffsetHeight || this.props.rowHeight * headerRows.length}\n              minHeight={this.props.minHeight}\n              scrollToRowIndex={this.props.scrollToRowIndex}\n              contextMenu={this.props.contextMenu}\n              rowSelection={this.props.rowSelection}\n              getSubRowDetails={this.props.getSubRowDetails}\n              rowGroupRenderer={this.props.rowGroupRenderer}\n              enableCellSelect={this.props.enableCellSelect}\n              enableCellAutoFocus={this.props.enableCellAutoFocus}\n              cellNavigationMode={this.props.cellNavigationMode}\n              eventBus={this.props.eventBus}\n              interactionMasksMetaData={this.props.interactionMasksMetaData}\n              RowsContainer={this.props.RowsContainer}\n              editorPortalTarget={this.props.editorPortalTarget}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]}