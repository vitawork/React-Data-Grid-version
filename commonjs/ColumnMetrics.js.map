{"version":3,"file":"ColumnMetrics.js","sourceRoot":"","sources":["../src/ColumnMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["export { sameColumn } from './ColumnComparer';\nimport { getSize, isFrozen } from './ColumnUtils';\nimport getScrollbarSize from './getScrollbarSize';\nimport { isColumnsImmutable } from './common/utils';\nimport { Column, CalculatedColumn, ColumnList, ColumnMetrics } from './common/types';\n\ntype Metrics<R> = Pick<ColumnMetrics<R>, 'totalWidth' | 'minColumnWidth'> & {\n  columns: ColumnList<R>;\n};\n\nfunction cloneColumns<R>(columns: ColumnList<R>): Column<R>[] {\n  if (Array.isArray(columns)) {\n    return columns.map(c => ({ ...c }));\n  }\n  return cloneColumns(columns.toArray());\n}\n\nfunction setColumnWidths<R>(columns: Column<R>[], totalWidth: number): void {\n  for (const column of columns) {\n    if (typeof column.width === 'string' && /^\\d+%$/.test(column.width)) {\n      column.width = Math.floor(totalWidth * column.width / 100);\n    }\n  }\n}\n\nfunction setDefferedColumnWidths<R>(columns: Column<R>[], unallocatedWidth: number, minColumnWidth: number): void {\n  const defferedColumns = columns.filter(c => !c.width);\n  const columnWidth = Math.floor(unallocatedWidth / defferedColumns.length);\n\n  for (const column of columns) {\n    if (column.width) continue;\n\n    if (unallocatedWidth <= 0) {\n      column.width = minColumnWidth;\n    }\n\n    column.width = columnWidth < minColumnWidth ? minColumnWidth : columnWidth;\n  }\n}\n\nfunction setColumnOffsets<R>(columns: Column<R>[]): void {\n  let left = 0;\n  for (const column of columns as CalculatedColumn<R>[]) {\n    column.left = left;\n    left += column.width;\n  }\n}\n\nfunction getTotalColumnWidth<R>(columns: Column<R>[]): number {\n  return columns.reduce((acc, c) => acc + (c.width || 0), 0);\n}\n\nexport function recalculate<R>(metrics: Metrics<R>): ColumnMetrics<R> {\n  // clone columns so we can safely edit them:\n  const columns = cloneColumns(metrics.columns);\n  // compute width for columns which specify width\n  setColumnWidths(columns, metrics.totalWidth);\n\n  const width = getTotalColumnWidth(columns);\n  const unallocatedWidth = metrics.totalWidth - width - getScrollbarSize();\n\n  // compute width for columns which doesn't specify width\n  setDefferedColumnWidths(columns, unallocatedWidth, metrics.minColumnWidth);\n\n  // compute left offset\n  setColumnOffsets(columns);\n\n  const frozenColumns = columns.filter(c => isFrozen(c));\n  const nonFrozenColumns = columns.filter(c => !isFrozen(c));\n  const calculatedColumns = frozenColumns.concat(nonFrozenColumns) as CalculatedColumn<R>[];\n  calculatedColumns.forEach((c, i) => c.idx = i);\n  return {\n    width,\n    columns: calculatedColumns,\n    totalWidth: metrics.totalWidth,\n    totalColumnWidth: getTotalColumnWidth(columns),\n    minColumnWidth: metrics.minColumnWidth\n  };\n}\n\n/**\n * Update column metrics calculation by resizing a column.\n */\nexport function resizeColumn<R>(metrics: ColumnMetrics<R>, index: number, width: number): ColumnMetrics<R> {\n  const updatedColumn = { ...metrics.columns[index] };\n  updatedColumn.width = Math.max(width, metrics.minColumnWidth);\n  const updatedMetrics = { ...metrics };\n  updatedMetrics.columns = [...metrics.columns];\n  updatedMetrics.columns.splice(index, 1, updatedColumn);\n\n  return recalculate(updatedMetrics);\n}\n\ntype ColumnComparer<R> = (colA: Column<R>, colB: Column<R>) => boolean;\n\nfunction compareEachColumn<R>(prevColumns: ColumnList<R>, nextColumns: ColumnList<R>, isSameColumn: ColumnComparer<R>): boolean {\n  if (getSize(prevColumns) !== getSize(nextColumns)) return false;\n\n  const keys = new Set<keyof R>();\n  const prevColumnsMap = new Map<keyof R, Column<R>>();\n  const nextColumnsMap = new Map<keyof R, Column<R>>();\n\n  for (const column of prevColumns) {\n    keys.add(column.key);\n    prevColumnsMap.set(column.key, column);\n  }\n\n  for (const column of nextColumns) {\n    keys.add(column.key);\n    nextColumnsMap.set(column.key, column);\n  }\n\n  if (keys.size > prevColumnsMap.size) return false;\n\n  for (const key of keys) {\n    if (!prevColumnsMap.has(key) || !nextColumnsMap.has(key)) return false;\n    const prevColumn = prevColumnsMap.get(key) as Column<R>;\n    const nextColumn = nextColumnsMap.get(key) as Column<R>;\n    if (!isSameColumn(prevColumn, nextColumn)) return false;\n  }\n\n  return true;\n}\n\nexport function sameColumns<R>(prevColumns: ColumnList<R>, nextColumns: ColumnList<R>, isSameColumn: ColumnComparer<R>): boolean {\n  if (isColumnsImmutable(prevColumns) && isColumnsImmutable(nextColumns)) {\n    return prevColumns === nextColumns;\n  }\n\n  return compareEachColumn(prevColumns, nextColumns, isSameColumn);\n}\n"]}