{"version":3,"file":"HeaderRow.js","sourceRoot":"","sources":["../src/HeaderRow.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport HeaderCell from './HeaderCell';\nimport SortableHeaderCell from './common/cells/headerCells/SortableHeaderCell';\nimport FilterableHeaderCell from './common/cells/headerCells/FilterableHeaderCell';\nimport getScrollbarSize from './getScrollbarSize';\nimport { isFrozen } from './ColumnUtils';\nimport { HeaderRowType, HeaderCellType, DEFINE_SORT } from './common/enums';\nimport { CalculatedColumn, AddFilterEvent } from './common/types';\nimport { HeaderProps } from './Header';\n\ntype SharedHeaderProps<R> = Pick<HeaderProps<R>,\n'draggableHeaderCell'\n| 'onHeaderDrop'\n| 'sortColumn'\n| 'sortDirection'\n| 'onSort'\n| 'getValidFilterValues'\n>;\n\nexport interface HeaderRowProps<R> extends SharedHeaderProps<R> {\n  width?: number;\n  height: number;\n  columns: CalculatedColumn<R>[];\n  onColumnResize(column: CalculatedColumn<R>, width: number): void;\n  onColumnResizeEnd(column: CalculatedColumn<R>, width: number): void;\n  style?: React.CSSProperties;\n  filterable?: boolean;\n  onFilterChange?(args: AddFilterEvent<R>): void;\n  rowType: HeaderRowType;\n}\n\nexport default class HeaderRow<R> extends React.Component<HeaderRowProps<R>> {\n  static displayName = 'HeaderRow';\n\n  private readonly cells = new Map<keyof R, HeaderCell<R>>();\n\n  shouldComponentUpdate(nextProps: HeaderRowProps<R>) {\n    return (\n      nextProps.width !== this.props.width\n      || nextProps.height !== this.props.height\n      || nextProps.columns !== this.props.columns\n      || !shallowEqual(nextProps.style, this.props.style)\n      || this.props.sortColumn !== nextProps.sortColumn\n      || this.props.sortDirection !== nextProps.sortDirection\n    );\n  }\n\n  getHeaderCellType(column: CalculatedColumn<R>): HeaderCellType {\n    if (column.filterable && this.props.filterable) {\n      return HeaderCellType.FILTERABLE;\n    }\n\n    if (column.sortable && this.props.rowType !== HeaderRowType.FILTER) {\n      return HeaderCellType.SORTABLE;\n    }\n\n    return HeaderCellType.NONE;\n  }\n\n  getFilterableHeaderCell(column: CalculatedColumn<R>) {\n    const FilterRenderer = column.filterRenderer || FilterableHeaderCell;\n    return (\n      <FilterRenderer<R>\n        column={column}\n        onChange={this.props.onFilterChange}\n        getValidFilterValues={this.props.getValidFilterValues}\n      />\n    );\n  }\n\n  getSortableHeaderCell(column: CalculatedColumn<R>) {\n    const sortDirection = this.props.sortColumn === column.key && this.props.sortDirection || DEFINE_SORT.NONE;\n    const sortDescendingFirst = column.sortDescendingFirst || false;\n    return (\n      <SortableHeaderCell<R>\n        column={column}\n        rowType={this.props.rowType}\n        onSort={this.props.onSort}\n        sortDirection={sortDirection}\n        sortDescendingFirst={sortDescendingFirst}\n      />\n    );\n  }\n\n  getHeaderRenderer(column: CalculatedColumn<R>) {\n    if (column.headerRenderer && !column.sortable && !this.props.filterable) {\n      return column.headerRenderer;\n    }\n    const headerCellType = this.getHeaderCellType(column);\n    switch (headerCellType) {\n      case HeaderCellType.SORTABLE:\n        return this.getSortableHeaderCell(column);\n      case HeaderCellType.FILTERABLE:\n        return this.getFilterableHeaderCell(column);\n      default:\n        return undefined;\n    }\n  }\n\n  getCells() {\n    const cells = [];\n    const frozenCells = [];\n    const { columns, rowType } = this.props;\n\n    for (const column of columns) {\n      const { key } = column;\n      const renderer = key === 'select-row' && rowType === HeaderRowType.FILTER ? <div /> : this.getHeaderRenderer(column);\n\n      const cell = (\n        <HeaderCell<R>\n          key={key as string}\n          ref={node => node ? this.cells.set(key, node) : this.cells.delete(key)}\n          column={column}\n          rowType={rowType}\n          height={this.props.height}\n          renderer={renderer}\n          onResize={this.props.onColumnResize}\n          onResizeEnd={this.props.onColumnResizeEnd}\n          onHeaderDrop={this.props.onHeaderDrop}\n          draggableHeaderCell={this.props.draggableHeaderCell}\n        />\n      );\n\n      if (isFrozen(column)) {\n        frozenCells.push(cell);\n      } else {\n        cells.push(cell);\n      }\n    }\n\n    return cells.concat(frozenCells);\n  }\n\n  setScrollLeft(scrollLeft: number): void {\n    this.props.columns.forEach(column => {\n      const { key } = column;\n      if (!this.cells.has(key)) return;\n      const cell = this.cells.get(key)!;\n      if (isFrozen(column)) {\n        cell.setScrollLeft(scrollLeft);\n      } else {\n        cell.removeScroll();\n      }\n    });\n  }\n\n  render() {\n    const cellsStyle: React.CSSProperties = {\n      width: this.props.width ? this.props.width + getScrollbarSize() : '100%',\n      height: this.props.height\n    };\n\n    // FIXME: do we need 2 wrapping divs?\n    return (\n      <div\n        style={this.props.style}\n        className=\"react-grid-HeaderRow\"\n      >\n        <div style={cellsStyle}>\n          {this.getCells()}\n        </div>\n      </div>\n    );\n  }\n}\n"]}