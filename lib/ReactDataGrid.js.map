{"version":3,"file":"ReactDataGrid.js","sourceRoot":"","sources":["../src/ReactDataGrid.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Grid from './Grid';\nimport ToolbarContainer, { ToolbarProps } from './ToolbarContainer';\nimport CheckboxEditor, { CheckboxEditorProps } from './common/editors/CheckboxEditor';\nimport { SelectAll } from './formatters';\nimport * as rowUtils from './RowUtils';\nimport { getSize } from './ColumnUtils';\nimport KeyCodes from './KeyCodes';\nimport { sameColumn, sameColumns, recalculate, resizeColumn } from './ColumnMetrics';\nimport { ScrollState } from './Viewport';\nimport { RowsContainerProps } from './RowsContainer';\nimport { EventBus } from './masks';\nimport { CellNavigationMode, EventTypes, UpdateActions, HeaderRowType, DEFINE_SORT } from './common/enums';\nimport {\n  AddFilterEvent,\n  CalculatedColumn,\n  CellActionButton,\n  CellCopyPasteEvent,\n  CellMetaData,\n  CheckCellIsEditableEvent,\n  Column,\n  ColumnList,\n  ColumnMetrics,\n  CommitEvent,\n  GridRowsUpdatedEvent,\n  HeaderRowData,\n  InteractionMasksMetaData,\n  Position,\n  RowExpandToggleEvent,\n  RowGetter,\n  RowSelection,\n  RowSelectionParams,\n  SelectedRange,\n  SubRowDetails,\n  SubRowOptions,\n  SelectedRow,\n  RowRendererProps\n} from './common/types';\n\nexport interface DataGridProps<R extends {}> {\n  /** An array of objects representing each column on the grid. Can also be an ImmutableJS object */\n  columns: ColumnList<R>;\n  /** The minimum width of the grid in pixels */\n  minWidth?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight: number;\n  /** Deprecated: Legacy prop to turn on row selection. Use rowSelection props instead*/\n  enableRowSelect: boolean | string;\n  /** Component used to render toolbar above the grid */\n  toolbar?: React.ReactElement<ToolbarProps<R>> | React.ComponentType<ToolbarProps<R>>;\n  cellRangeSelection?: {\n    onStart(selectedRange: SelectedRange): void;\n    onUpdate?(selectedRange: SelectedRange): void;\n    onComplete?(selectedRange: SelectedRange): void;\n  };\n  /** Minimum column width in pixels */\n  minColumnWidth: number;\n  /** Component to render the UI in the header row for selecting all rows */\n  selectAllRenderer: React.ComponentType<React.ComponentProps<typeof SelectAll>>;\n  /** Function called whenever row is clicked */\n  onRowClick?(rowIdx: number, rowData: R, column: CalculatedColumn<R>): void;\n  /** Function called whenever row is double clicked */\n  onRowDoubleClick?(rowIdx: number, rowData: R, column: CalculatedColumn<R>): void;\n  onAddFilter?(event: AddFilterEvent<R>): void;\n  onClearFilters?(): void;\n  /** Function called whenever grid is sorted*/\n  onGridSort?(columnKey: keyof R, direction: DEFINE_SORT): void;\n  /** Function called whenever keyboard key is released */\n  onGridKeyUp?(event: React.KeyboardEvent<HTMLDivElement>): void;\n  /** Function called whenever keyboard key is pressed down */\n  onGridKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): void;\n  onRowSelect?(rowData: R[]): void;\n  columnEquality(c1: Column<R>, c2: Column<R>): boolean;\n  rowSelection?: {\n    enableShiftSelect?: boolean;\n    /** Function called whenever rows are selected */\n    onRowsSelected?(args: RowSelectionParams<R>[]): void;\n    /** Function called whenever rows are deselected */\n    onRowsDeselected?(args: RowSelectionParams<R>[]): void;\n    /** toggle whether to show a checkbox in first column to select rows */\n    showCheckbox?: boolean;\n    /** Method by which rows should be selected */\n    selectBy: RowSelection;\n  };\n  /** Custom checkbox formatter */\n  rowActionsCell?: React.ComponentType<CheckboxEditorProps<R>>;\n  /**\n   * Callback called whenever row data is updated\n   * When editing is enabled, this callback will be called for the following scenarios\n   * 1. Using the supplied editor of the column. The default editor is the SimpleTextEditor.\n   * 2. Copy/pasting the value from one cell to another <kbd>CTRL</kbd>+<kbd>C</kbd>, <kbd>CTRL</kbd>+<kbd>V</kbd>\n   * 3. Update multiple cells by dragging the fill handle of a cell up or down to a destination cell.\n   * 4. Update all cells under a given cell by double clicking the cell's fill handle.\n   */\n  onGridRowsUpdated?<E extends GridRowsUpdatedEvent<R>>(event: E): void;\n  /** Called when a column is resized */\n  onColumnResize?(idx: number, width: number): void;\n\n  /** Grid Props */\n  /** The primary key property of each row */\n  rowKey: keyof R;\n  /** The height of each row in pixels */\n  rowHeight: number;\n  rowRenderer?: React.ReactElement | React.ComponentType<RowRendererProps<R>>;\n  rowGroupRenderer?: React.ComponentType;\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rowGetter: RowGetter<R>;\n  /** The number of rows to be rendered */\n  rowsCount: number;\n  /** The minimum height of the grid in pixels */\n  minHeight: number;\n  /** When set, grid will scroll to this row index */\n  scrollToRowIndex?: number;\n  /** Component used to render a context menu. react-data-grid-addons provides a default context menu which may be used*/\n  contextMenu?: React.ReactElement;\n  /** Used to toggle whether cells can be selected or not */\n  enableCellSelect: boolean;\n  /** Toggles whether cells should be autofocused */\n  enableCellAutoFocus: boolean;\n  cellNavigationMode: CellNavigationMode;\n  /** The node where the editor portal should mount. */\n  editorPortalTarget: Element;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: keyof R;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: DEFINE_SORT;\n  /** Called when the grid is scrolled */\n  onScroll?(scrollState: ScrollState): void;\n  /** Component used to render a draggable header cell */\n  draggableHeaderCell?: React.ComponentType<{ column: CalculatedColumn<R>; onHeaderDrop(): void }>;\n  getValidFilterValues?(columnKey: keyof R): unknown;\n  RowsContainer?: React.ComponentType<RowsContainerProps>;\n  emptyRowsView?: React.ComponentType<{}>;\n  onHeaderDrop?(): void;\n  getSubRowDetails?(row: R): SubRowDetails;\n\n  /** CellMetaData */\n  getCellActions?(column: CalculatedColumn<R>, rowData: R): CellActionButton[] | undefined;\n  /** Called whenever a sub row is deleted from the grid */\n  onDeleteSubRow?(options: SubRowOptions<R>): void;\n  /** Called whenever a sub row is added to the grid */\n  onAddSubRow?(): void;\n  /** Function called whenever a cell has been expanded */\n  onCellExpand?(options: SubRowOptions<R>): void;\n  onRowExpandToggle?(event: RowExpandToggleEvent): void;\n\n  /** InteractionMasksMetaData */\n  /** Deprecated: Function called when grid is updated via a copy/paste. Use onGridRowsUpdated instead*/\n  onCellCopyPaste?(event: CellCopyPasteEvent<R>): void;\n  /** Function called whenever a cell is selected */\n  onCellSelected?(position: Position): void;\n  /** Function called whenever a cell is deselected */\n  onCellDeSelected?(position: Position): void;\n  /** called before cell is set active, returns a boolean to determine whether cell is editable */\n  onCheckCellIsEditable?(event: CheckCellIsEditableEvent<R>): boolean;\n}\n\ntype DefaultProps = Pick<DataGridProps<{ id?: unknown }>,\n'enableCellSelect'\n| 'selectAllRenderer'\n| 'rowHeight'\n| 'headerFiltersHeight'\n| 'enableRowSelect'\n| 'minHeight'\n| 'rowKey'\n| 'cellNavigationMode'\n| 'enableCellAutoFocus'\n| 'minColumnWidth'\n| 'columnEquality'\n| 'editorPortalTarget'\n>;\n\nexport interface DataGridState<R> {\n  columnMetrics: ColumnMetrics<R>;\n  lastRowIdxUiSelected: number;\n  selectedRows: SelectedRow<R>[];\n  canFilter?: boolean;\n  sortColumn?: keyof R;\n  sortDirection?: DEFINE_SORT;\n}\n\nfunction isRowSelected<R>(keys: unknown, indexes: unknown, isSelectedKey: unknown, rowData: R, rowIdx: number) {\n  return rowUtils.isRowSelected(keys as { rowKey?: string; values?: string[] } | null, indexes as number[] | null, isSelectedKey as string | null, rowData, rowIdx);\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <ReactDataGrid columns={columns} rowGetter={i => rows[i]} rowsCount={3} />\n*/\nexport default class ReactDataGrid<R extends {}> extends React.Component<DataGridProps<R>, DataGridState<R>> {\n  static displayName = 'ReactDataGrid';\n\n  static defaultProps: DefaultProps = {\n    enableCellSelect: false,\n    rowHeight: 35,\n    headerFiltersHeight: 45,\n    enableRowSelect: false,\n    minHeight: 350,\n    rowKey: 'id',\n    cellNavigationMode: CellNavigationMode.NONE,\n    enableCellAutoFocus: true,\n    minColumnWidth: 80,\n    selectAllRenderer: SelectAll,\n    columnEquality: sameColumn,\n    editorPortalTarget: document.body\n  };\n\n  private readonly grid = React.createRef<HTMLDivElement>();\n  private readonly base = React.createRef<Grid<R>>();\n  private readonly selectAllCheckbox = React.createRef<HTMLInputElement>();\n  private readonly eventBus = new EventBus();\n  private readonly _keysDown = new Set<number>();\n  private _cachedColumns?: ColumnList<R>;\n  private _cachedComputedColumns?: ColumnList<R>;\n\n  constructor(props: DataGridProps<R>) {\n    super(props);\n    const initialState: DataGridState<R> = {\n      columnMetrics: this.createColumnMetrics(),\n      selectedRows: [],\n      canFilter: false,\n      lastRowIdxUiSelected: -1\n    };\n\n    if (this.props.sortColumn && this.props.sortDirection) {\n      initialState.sortColumn = this.props.sortColumn;\n      initialState.sortDirection = this.props.sortDirection;\n    }\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.metricsUpdated);\n    if (this.props.cellRangeSelection) {\n      window.addEventListener('mouseup', this.handleWindowMouseUp);\n    }\n    this.metricsUpdated();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.metricsUpdated);\n    window.removeEventListener('mouseup', this.handleWindowMouseUp);\n  }\n\n  componentWillReceiveProps(nextProps: DataGridProps<R>) {\n    if (\n      nextProps.columns && (\n        !sameColumns(this.props.columns, nextProps.columns, this.props.columnEquality)\n        || nextProps.minWidth !== this.props.minWidth\n      )\n    ) {\n      const columnMetrics = this.createColumnMetrics(nextProps);\n      this.setState({ columnMetrics });\n    }\n  }\n\n  selectCell({ idx, rowIdx }: Position, openEditor?: boolean) {\n    this.eventBus.dispatch(EventTypes.SELECT_CELL, { rowIdx, idx }, openEditor);\n  }\n\n  gridWidth() {\n    const { current } = this.grid;\n    return current && current.parentElement ? current.parentElement.offsetWidth : 0;\n  }\n\n  getTotalWidth() {\n    if (this.grid.current) {\n      return this.gridWidth();\n    }\n    return getSize(this.props.columns) * this.props.minColumnWidth;\n  }\n\n  getColumn(idx: number) {\n    return this.state.columnMetrics.columns[idx];\n  }\n\n  getSize() {\n    return this.state.columnMetrics.columns.length;\n  }\n\n  metricsUpdated = () => {\n    const columnMetrics = this.createColumnMetrics();\n    this.setState({ columnMetrics });\n  };\n\n  createColumnMetrics(props = this.props) {\n    const gridColumns = this.setupGridColumns(props);\n    const metrics = {\n      columns: gridColumns,\n      minColumnWidth: this.props.minColumnWidth,\n      totalWidth: this.props.minWidth || this.getTotalWidth()\n    };\n    return recalculate(metrics);\n  }\n\n  isSingleKeyDown(keyCode: number) {\n    return this._keysDown.has(keyCode) && this._keysDown.size === 1;\n  }\n\n  handleColumnResize = (idx: number, width: number) => {\n    const columnMetrics = resizeColumn(this.state.columnMetrics, idx, width);\n    this.setState({ columnMetrics });\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(idx, width);\n    }\n  };\n\n  handleDragEnter = (overRowIdx: number) => {\n    this.eventBus.dispatch(EventTypes.DRAG_ENTER, overRowIdx);\n  };\n\n  handleViewportKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    // Track which keys are currently down for shift clicking etc\n    this._keysDown.add(e.keyCode);\n\n    const { onGridKeyDown } = this.props;\n    if (onGridKeyDown) {\n      onGridKeyDown(e);\n    }\n  };\n\n  handleViewportKeyUp = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    // Track which keys are currently down for shift clicking etc\n    this._keysDown.delete(e.keyCode);\n\n    const { onGridKeyUp } = this.props;\n    if (onGridKeyUp) {\n      onGridKeyUp(e);\n    }\n  };\n\n  handlerCellClick = ({ rowIdx, idx }: Position) => {\n    const { onRowClick, rowGetter } = this.props;\n    this.selectCell({ rowIdx, idx });\n\n    if (onRowClick) {\n      onRowClick(rowIdx, rowGetter(rowIdx), this.getColumn(idx));\n    }\n  };\n\n  handleCellMouseDown = (position: Position) => {\n    this.eventBus.dispatch(EventTypes.SELECT_START, position);\n  };\n\n  handleCellMouseEnter = (position: Position) => {\n    this.eventBus.dispatch(EventTypes.SELECT_UPDATE, position);\n  };\n\n  handleWindowMouseUp = () => {\n    this.eventBus.dispatch(EventTypes.SELECT_END);\n  };\n\n  handleCellContextMenu = (position: Position) => {\n    this.selectCell(position);\n  };\n\n  handleCellDoubleClick = ({ rowIdx, idx }: Position) => {\n    const { onRowDoubleClick, rowGetter } = this.props;\n    if (onRowDoubleClick) {\n      onRowDoubleClick(rowIdx, rowGetter(rowIdx), this.getColumn(idx));\n    }\n    this.openCellEditor(rowIdx, idx);\n  };\n\n  handleToggleFilter = () => {\n    // setState() does not immediately mutate this.state but creates a pending state transition.\n    // Therefore if you want to do something after the state change occurs, pass it in as a callback function.\n    this.setState((prevState) => ({ canFilter: !prevState.canFilter }), () => {\n      if (this.state.canFilter === false && this.props.onClearFilters) {\n        this.props.onClearFilters();\n      }\n    });\n  };\n\n  handleDragHandleDoubleClick: InteractionMasksMetaData<R>['onDragHandleDoubleClick'] = (e) => {\n    const cellKey = this.getColumn(e.idx).key;\n    this.handleGridRowsUpdated(cellKey, e.rowIdx, this.props.rowsCount - 1, { [cellKey]: e.rowData[cellKey] }, UpdateActions.COLUMN_FILL);\n  };\n\n  handleGridRowsUpdated: InteractionMasksMetaData<R>['onGridRowsUpdated'] = (cellKey, fromRow, toRow, updated, action, originRow) => {\n    const { rowGetter, rowKey, onGridRowsUpdated } = this.props;\n    if (!onGridRowsUpdated) {\n      return;\n    }\n\n    const rowIds = [];\n    for (let i = fromRow; i <= toRow; i++) {\n      rowIds.push(rowGetter(i)[rowKey]);\n    }\n\n    const fromRowData = rowGetter(action === UpdateActions.COPY_PASTE ? originRow! : fromRow);\n    const fromRowId = fromRowData[rowKey];\n    const toRowId = rowGetter(toRow)[rowKey];\n    onGridRowsUpdated({ cellKey, fromRow, toRow, fromRowId, toRowId, rowIds, updated: updated as never, action, fromRowData });\n  };\n\n  handleCommit = (commit: CommitEvent<R>) => {\n    const targetRow = commit.rowIdx;\n    this.handleGridRowsUpdated(commit.cellKey, targetRow, targetRow, commit.updated, UpdateActions.CELL_UPDATE);\n  };\n\n  handleSort = (sortColumn: keyof R, sortDirection: DEFINE_SORT) => {\n    this.setState({ sortColumn, sortDirection }, () => {\n      const { onGridSort } = this.props;\n      if (onGridSort) {\n        onGridSort(sortColumn, sortDirection);\n      }\n    });\n  };\n\n  getSelectedRow(rows: SelectedRow<R>[], key: unknown) {\n    return rows.find(r => r[this.props.rowKey] === key);\n  }\n\n  useNewRowSelection = () => {\n    return this.props.rowSelection && this.props.rowSelection.selectBy;\n  };\n\n  // return false if not a shift select so can be handled as normal row selection\n  handleShiftSelect = (rowIdx: number) => {\n    const { rowSelection } = this.props;\n    if (rowSelection && this.state.lastRowIdxUiSelected > -1 && this.isSingleKeyDown(KeyCodes.Shift)) {\n      const { keys, indexes, isSelectedKey } = rowSelection.selectBy as { [key: string]: unknown };\n      const isPreviouslySelected = isRowSelected(keys, indexes, isSelectedKey, this.props.rowGetter(rowIdx), rowIdx);\n\n      if (isPreviouslySelected) return false;\n\n      let handled = false;\n\n      if (rowIdx > this.state.lastRowIdxUiSelected) {\n        const rowsSelected = [];\n\n        for (let i = this.state.lastRowIdxUiSelected + 1; i <= rowIdx; i++) {\n          rowsSelected.push({ rowIdx: i, row: this.props.rowGetter(i) });\n        }\n\n        if (typeof rowSelection.onRowsSelected === 'function') {\n          rowSelection.onRowsSelected(rowsSelected);\n        }\n\n        handled = true;\n      } else if (rowIdx < this.state.lastRowIdxUiSelected) {\n        const rowsSelected = [];\n\n        for (let i = rowIdx; i <= this.state.lastRowIdxUiSelected - 1; i++) {\n          rowsSelected.push({ rowIdx: i, row: this.props.rowGetter(i) });\n        }\n\n        if (typeof rowSelection.onRowsSelected === 'function') {\n          rowSelection.onRowsSelected(rowsSelected);\n        }\n\n        handled = true;\n      }\n\n      if (handled) {\n        this.setState({ lastRowIdxUiSelected: rowIdx });\n      }\n\n      return handled;\n    }\n\n    return false;\n  };\n\n  handleNewRowSelect = (rowIdx: number, rowData: R) => {\n    const { current } = this.selectAllCheckbox;\n    if (current && current.checked === true) {\n      current.checked = false;\n    }\n\n    const { rowSelection } = this.props;\n    if (rowSelection) {\n      const { keys, indexes, isSelectedKey } = rowSelection.selectBy as { [key: string]: unknown };\n      const isPreviouslySelected = isRowSelected(keys, indexes, isSelectedKey, rowData, rowIdx);\n\n      this.setState({ lastRowIdxUiSelected: isPreviouslySelected ? -1 : rowIdx });\n      const cb = isPreviouslySelected ? rowSelection.onRowsDeselected : rowSelection.onRowsSelected;\n      if (typeof cb === 'function') {\n        cb([{ rowIdx, row: rowData }]);\n      }\n    }\n  };\n\n  // columnKey not used here as this function will select the whole row,\n  // but needed to match the function signature in the CheckboxEditor\n  handleRowSelect = (rowIdx: number, columnKey: keyof R, rowData: R, event: React.ChangeEvent<HTMLInputElement>) => {\n    event.stopPropagation();\n    const { rowSelection } = this.props;\n\n    if (this.useNewRowSelection()) {\n      if (rowSelection && rowSelection.enableShiftSelect === true) {\n        if (!this.handleShiftSelect(rowIdx)) {\n          this.handleNewRowSelect(rowIdx, rowData);\n        }\n      } else {\n        this.handleNewRowSelect(rowIdx, rowData);\n      }\n    } else { // Fallback to old onRowSelect handler\n      const selectedRows = this.props.enableRowSelect === 'single' ? [] : [...this.state.selectedRows];\n      const selectedRow = this.getSelectedRow(selectedRows, rowData[this.props.rowKey]);\n      if (selectedRow) {\n        selectedRow.isSelected = !selectedRow.isSelected;\n      } else {\n        (rowData as SelectedRow<R>).isSelected = true;\n        selectedRows.push(rowData as SelectedRow<R>);\n      }\n      this.setState({ selectedRows });\n      if (this.props.onRowSelect) {\n        this.props.onRowSelect(selectedRows.filter(r => r.isSelected === true));\n      }\n    }\n  };\n\n  handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const allRowsSelected = e.currentTarget.checked;\n    const { rowSelection } = this.props;\n    if (rowSelection && this.useNewRowSelection()) {\n      const { keys, indexes, isSelectedKey } = rowSelection.selectBy as { [key: string]: unknown };\n\n      if (allRowsSelected && typeof rowSelection.onRowsSelected === 'function') {\n        const selectedRows = [];\n        for (let i = 0; i < this.props.rowsCount; i++) {\n          const rowData = this.props.rowGetter(i);\n          if (!isRowSelected(keys, indexes, isSelectedKey, rowData, i)) {\n            selectedRows.push({ rowIdx: i, row: rowData });\n          }\n        }\n\n        if (selectedRows.length > 0) {\n          rowSelection.onRowsSelected(selectedRows);\n        }\n      } else if (!allRowsSelected && typeof rowSelection.onRowsDeselected === 'function') {\n        const deselectedRows = [];\n        for (let i = 0; i < this.props.rowsCount; i++) {\n          const rowData = this.props.rowGetter(i);\n          if (isRowSelected(keys, indexes, isSelectedKey, rowData, i)) {\n            deselectedRows.push({ rowIdx: i, row: rowData });\n          }\n        }\n\n        if (deselectedRows.length > 0) {\n          rowSelection.onRowsDeselected(deselectedRows);\n        }\n      }\n    } else {\n      const selectedRows: SelectedRow<R>[] = [];\n      for (let i = 0; i < this.props.rowsCount; i++) {\n        const row = { ...this.props.rowGetter(i), isSelected: allRowsSelected };\n        selectedRows.push(row);\n      }\n      this.setState({ selectedRows });\n      if (typeof this.props.onRowSelect === 'function') {\n        this.props.onRowSelect(selectedRows.filter(r => r.isSelected === true));\n      }\n    }\n  };\n\n  getRowOffsetHeight() {\n    return this.getHeaderRows().reduce((offsetHeight, row) => offsetHeight += row.height, 0);\n  }\n\n  getHeaderRows() {\n    const { headerRowHeight, rowHeight, onAddFilter, headerFiltersHeight } = this.props;\n    const rows: HeaderRowData<R>[] = [{ height: headerRowHeight || rowHeight, rowType: HeaderRowType.HEADER }];\n    if (this.state.canFilter === true) {\n      rows.push({\n        rowType: HeaderRowType.FILTER,\n        filterable: true,\n        onFilterChange: onAddFilter,\n        height: headerFiltersHeight\n      });\n    }\n    return rows;\n  }\n\n  getRowSelectionProps() {\n    return this.props.rowSelection && this.props.rowSelection.selectBy;\n  }\n\n  getSelectedRows() {\n    if (this.props.rowSelection) {\n      return;\n    }\n\n    return this.state.selectedRows.filter(r => r.isSelected === true);\n  }\n\n  openCellEditor(rowIdx: number, idx: number) {\n    this.selectCell({ rowIdx, idx }, true);\n  }\n\n  scrollToColumn(colIdx: number) {\n    this.eventBus.dispatch(EventTypes.SCROLL_TO_COLUMN, colIdx);\n  }\n\n  setupGridColumns(props = this.props): ColumnList<R> {\n    const { columns } = props;\n    if (this._cachedColumns === columns) {\n      return this._cachedComputedColumns!;\n    }\n\n    this._cachedColumns = columns;\n\n    if (this.props.rowActionsCell || (props.enableRowSelect && !this.props.rowSelection) || (props.rowSelection && props.rowSelection.showCheckbox !== false)) {\n      const SelectAllComponent = this.props.selectAllRenderer;\n      const headerRenderer = props.enableRowSelect === 'single'\n        ? undefined\n        : <SelectAllComponent onChange={this.handleCheckboxChange} ref={this.selectAllCheckbox} />;\n      const Formatter = (this.props.rowActionsCell ? this.props.rowActionsCell : CheckboxEditor) as unknown as React.ComponentClass<{ rowSelection: unknown }>;\n      const selectColumn = {\n        key: 'select-row',\n        name: '',\n        formatter: <Formatter rowSelection={this.props.rowSelection} />,\n        onCellChange: this.handleRowSelect,\n        filterable: false,\n        headerRenderer,\n        width: 60,\n        frozen: true,\n        getRowMetaData: (rowData: R) => rowData,\n        cellClass: this.props.rowActionsCell ? 'rdg-row-actions-cell' : ''\n      } as unknown as Column<R>;\n\n      this._cachedComputedColumns = Array.isArray(columns)\n        ? [selectColumn, ...columns]\n        : columns.unshift(selectColumn);\n    } else {\n      this._cachedComputedColumns = columns.slice(0) as ColumnList<R>;\n    }\n\n    return this._cachedComputedColumns;\n  }\n\n  render() {\n    const cellMetaData: CellMetaData<R> = {\n      rowKey: this.props.rowKey,\n      onCellClick: this.handlerCellClick,\n      onCellContextMenu: this.handleCellContextMenu,\n      onCellDoubleClick: this.handleCellDoubleClick,\n      onCellExpand: this.props.onCellExpand,\n      onRowExpandToggle: this.props.onRowExpandToggle,\n      getCellActions: this.props.getCellActions,\n      onDeleteSubRow: this.props.onDeleteSubRow,\n      onAddSubRow: this.props.onAddSubRow,\n      onDragEnter: this.handleDragEnter\n    };\n    if (this.props.cellRangeSelection) {\n      cellMetaData.onCellMouseDown = this.handleCellMouseDown;\n      cellMetaData.onCellMouseEnter = this.handleCellMouseEnter;\n    }\n\n    const interactionMasksMetaData: InteractionMasksMetaData<R> = {\n      onCheckCellIsEditable: this.props.onCheckCellIsEditable,\n      onCellCopyPaste: this.props.onCellCopyPaste,\n      onGridRowsUpdated: this.handleGridRowsUpdated,\n      onDragHandleDoubleClick: this.handleDragHandleDoubleClick,\n      onCellSelected: this.props.onCellSelected,\n      onCellDeSelected: this.props.onCellDeSelected,\n      onCellRangeSelectionStarted: this.props.cellRangeSelection && this.props.cellRangeSelection.onStart,\n      onCellRangeSelectionUpdated: this.props.cellRangeSelection && this.props.cellRangeSelection.onUpdate,\n      onCellRangeSelectionCompleted: this.props.cellRangeSelection && this.props.cellRangeSelection.onComplete,\n      onCommit: this.handleCommit\n    };\n\n    let containerWidth: string | number = this.props.minWidth || this.gridWidth();\n    let gridWidth: string | number = containerWidth;\n\n    // depending on the current lifecycle stage, gridWidth() may not initialize correctly\n    // this also handles cases where it always returns undefined -- such as when inside a div with display:none\n    // eg Bootstrap tabs and collapses\n    if (Number.isNaN(containerWidth) || containerWidth === 0) {\n      containerWidth = '100%';\n      gridWidth = '100%';\n    }\n\n    return (\n      <div\n        className=\"react-grid-Container\"\n        style={{ width: containerWidth }}\n        ref={this.grid}\n      >\n        <ToolbarContainer<R>\n          toolbar={this.props.toolbar}\n          columns={this.props.columns}\n          rowsCount={this.props.rowsCount}\n          onToggleFilter={this.handleToggleFilter}\n        />\n        <Grid<R>\n          ref={this.base}\n          rowKey={this.props.rowKey}\n          headerRows={this.getHeaderRows()}\n          draggableHeaderCell={this.props.draggableHeaderCell}\n          getValidFilterValues={this.props.getValidFilterValues}\n          columnMetrics={this.state.columnMetrics}\n          rowGetter={this.props.rowGetter}\n          rowsCount={this.props.rowsCount}\n          rowHeight={this.props.rowHeight}\n          rowRenderer={this.props.rowRenderer}\n          rowGroupRenderer={this.props.rowGroupRenderer}\n          cellMetaData={cellMetaData}\n          selectedRows={this.getSelectedRows()}\n          rowSelection={this.getRowSelectionProps()}\n          rowOffsetHeight={this.getRowOffsetHeight()}\n          sortColumn={this.state.sortColumn}\n          sortDirection={this.state.sortDirection}\n          onSort={this.handleSort}\n          minHeight={this.props.minHeight}\n          totalWidth={gridWidth}\n          onViewportKeydown={this.handleViewportKeyDown}\n          onViewportKeyup={this.handleViewportKeyUp}\n          onColumnResize={this.handleColumnResize}\n          scrollToRowIndex={this.props.scrollToRowIndex}\n          contextMenu={this.props.contextMenu}\n          enableCellSelect={this.props.enableCellSelect}\n          enableCellAutoFocus={this.props.enableCellAutoFocus}\n          cellNavigationMode={this.props.cellNavigationMode}\n          eventBus={this.eventBus}\n          onScroll={this.props.onScroll}\n          RowsContainer={this.props.RowsContainer}\n          emptyRowsView={this.props.emptyRowsView}\n          onHeaderDrop={this.props.onHeaderDrop}\n          getSubRowDetails={this.props.getSubRowDetails}\n          editorPortalTarget={this.props.editorPortalTarget}\n          interactionMasksMetaData={interactionMasksMetaData}\n        />\n      </div>\n    );\n  }\n}\n\nexport type ReactDataGridProps<R extends {}> = JSX.LibraryManagedAttributes<typeof ReactDataGrid, DataGridProps<R>>;\n"]}