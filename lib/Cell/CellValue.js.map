{"version":3,"file":"CellValue.js","sourceRoot":"","sources":["../../src/Cell/CellValue.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAEzD,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AAWpD,MAAM,CAAC,OAAO,UAAU,SAAS,CAAI,EAAkE;QAAhE,kBAAM,EAAE,oBAAO,EAAE,kBAAM,EAAE,gBAAK,EAAE,4BAAW;IAChF,SAAS,wBAAwB,CAAC,GAAM;QACtC,qFAAqF;QAC7E,IAAA,sCAAc,CAAY;QAClC,IAAI,cAAc,EAAE;YAClB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;gBAC1C,OAAO,CAAC,IAAI,CAAC,4IAA4I,CAAC,CAAC;aAC5J;YACD,OAAO,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SACpC;IACH,CAAC;IAED,SAAS,iBAAiB;QACxB,OAAO;YACL,KAAK,OAAA;YACL,MAAM,QAAA;YACN,MAAM,QAAA;YACN,WAAW,aAAA;YACX,GAAG,EAAE,OAAO;YACZ,eAAe,EAAE,wBAAwB,CAAC,OAAO,CAAC;SACnD,CAAC;IACJ,CAAC;IAEO,IAAA,4BAAS,CAAY;IAE7B,IAAI,SAAS,CAAC,SAAS,CAAC,EAAE;QACxB,OAAO,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE,iBAAiB,EAAE,CAAC,CAAC;KAC3D;IAED,IAAI,kBAAkB,CAAC,SAAS,CAAC,EAAE;QACjC,iEAAiE;QACjE,OAAO,KAAK,CAAC,aAAa,CAAC,SAAS,wBAAO,iBAAiB,EAAE,KAAE,KAAK,EAAE,KAAY,IAAG,CAAC,CAAC,uBAAuB;KAChH;IAED,OAAO,oBAAC,mBAAmB,IAAC,KAAK,EAAE,KAAe,GAAI,CAAC;AACzD,CAAC","sourcesContent":["import React from 'react';\nimport { isElement, isValidElementType } from 'react-is';\n\nimport { SimpleCellFormatter } from '../formatters';\nimport { CellContentProps } from './CellContent';\n\ntype CellValueProps<R> = Pick<CellContentProps<R>,\n'rowIdx'\n| 'rowData'\n| 'column'\n| 'value'\n| 'isScrolling'\n>;\n\nexport default function CellValue<R>({ rowIdx, rowData, column, value, isScrolling }: CellValueProps<R>) {\n  function getFormatterDependencies(row: R) {\n    // convention based method to get corresponding Id or Name of any Name or Id property\n    const { getRowMetaData } = column;\n    if (getRowMetaData) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('getRowMetaData for formatters is deprecated and will be removed in a future version of ReactDataGrid. Instead access row prop of formatter');\n      }\n      return getRowMetaData(row, column);\n    }\n  }\n\n  function getFormatterProps() {\n    return {\n      value,\n      column,\n      rowIdx,\n      isScrolling,\n      row: rowData,\n      dependentValues: getFormatterDependencies(rowData)\n    };\n  }\n\n  const { formatter } = column;\n\n  if (isElement(formatter)) {\n    return React.cloneElement(formatter, getFormatterProps());\n  }\n\n  if (isValidElementType(formatter)) {\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    return React.createElement(formatter, { ...getFormatterProps(), value: value as any }); //FIXME: fix value type\n  }\n\n  return <SimpleCellFormatter value={value as string} />;\n}\n"]}