{"version":3,"file":"CellAction.js","sourceRoot":"","sources":["../../src/Cell/CellAction.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,UAAU,MAAM,YAAY,CAAC;AAQpC,MAAM,CAAC,OAAO,UAAU,UAAU,CAAC,EAAqD;QAAnD,cAAI,EAAE,oBAAO,EAAE,sBAAQ,EAAE,oBAAO;IAC7D,IAAA,+BAAqC,EAApC,cAAM,EAAE,iBAA4B,CAAC;IAE5C,IAAM,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,EAAE;QACtD,sBAAsB,EAAE,OAAO;KAChC,CAAC,CAAC;IAEH,IAAM,mBAAmB,GAAG,UAAU,CAAC,wBAAwB,EAAE;QAC/D,gCAAgC,EAAE,MAAM;KACzC,CAAC,CAAC;IAEH,SAAS,iBAAiB;QACxB,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;YAClC,QAAQ,EAAE,CAAC;SACZ;QAED,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;SACpB;IACH,CAAC;IAED,OAAO,CACL,6BAAK,SAAS,EAAE,iBAAiB,EAAE,YAAY,EAAE,cAAM,OAAA,SAAS,CAAC,KAAK,CAAC,EAAhB,CAAgB;QACrE,6BAAK,SAAS,EAAE,mBAAmB,EAAE,OAAO,EAAE,iBAAiB,IAC5D,IAAI,CACD;QAEJ,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,CACrC,6BAAK,SAAS,EAAC,sBAAsB,IAClC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK,IAAK,OAAA,8BAAM,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,QAAQ,IAAG,MAAM,CAAC,IAAI,CAAQ,EAAhE,CAAgE,CAAC,CAC7F,CACP,CACC,CACP,CAAC;AACJ,CAAC","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { CellActionButton } from '../common/types';\n\nexport interface CellActionProps extends CellActionButton {\n  isFirst: boolean;\n}\n\nexport default function CellAction({ icon, actions, callback, isFirst }: CellActionProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const cellActionClasses = classNames('rdg-cell-action', {\n    'rdg-cell-action-last': isFirst\n  });\n\n  const actionButtonClasses = classNames('rdg-cell-action-button', {\n    'rdg-cell-action-button-toggled': isOpen\n  });\n\n  function onActionIconClick() {\n    if (typeof callback === 'function') {\n      callback();\n    }\n\n    if (actions && actions.length > 0) {\n      setIsOpen(!isOpen);\n    }\n  }\n\n  return (\n    <div className={cellActionClasses} onMouseLeave={() => setIsOpen(false)}>\n      <div className={actionButtonClasses} onClick={onActionIconClick}>\n        {icon}\n      </div>\n      {\n        isOpen && actions && actions.length && (\n          <div className=\"rdg-cell-action-menu\">\n            {actions.map((action, index) => <span key={index} onClick={action.callback}>{action.text}</span>)}\n          </div>\n        )}\n    </div>\n  );\n}\n"]}