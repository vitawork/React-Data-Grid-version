{"version":3,"file":"SelectedCellUtils.js","sourceRoot":"","sources":["../../src/utils/SelectedCellUtils.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAChE,OAAO,KAAK,QAAQ,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAGnD,IAAM,SAAS,GAAG,UAAC,MAAc,EAAE,SAAiB,IAAa,OAAA,MAAM,GAAG,SAAS,EAAlB,CAAkB,CAAC;AASpF,MAAM,UAAU,qBAAqB,CAAI,EAAmG;QAAjG,wBAAiC,EAAb,YAAG,EAAE,kBAAM,EAAI,oBAAO,EAAE,wBAAS,EAAE,0BAAU;IAC1G,IAAI,GAAG,GAAG,CAAC,EAAE;QACX,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;KACpE;IACD,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;IAC5B,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;IACxB,IAAA,oBAAK,CAAY;IACzB,IAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;IAC7D,IAAM,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IACzC,IAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC;IACzE,OAAO,EAAE,KAAK,OAAA,EAAE,IAAI,MAAA,EAAE,GAAG,KAAA,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,QAAA,EAAE,CAAC;AACzD,CAAC;AAQD,MAAM,UAAU,0BAA0B,CAAI,EAAkG;QAAhG,qBAAuC,EAAtB,oBAAO,EAAE,4BAAW,EAAI,oBAAO,EAAE,wBAAS;IACzG,IAAI,OAAO,CAAC,GAAG,GAAG,CAAC,EAAE;QACnB,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC,SAAS,EAAE,CAAC;KACtF;IAED,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,YAAY,GAAG,KAAK,CAAC;IACzB,KAAK,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;QACnD,IAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1B,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC;QACtB,YAAY,GAAG,YAAY,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;KACjD;IAEO,IAAA,gCAAI,CAA0B;IACtC,IAAM,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IACjD,IAAM,MAAM,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IACrE,IAAM,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC;IAE/E,OAAO,EAAE,KAAK,OAAA,EAAE,IAAI,MAAA,EAAE,GAAG,KAAA,EAAE,MAAM,QAAA,EAAE,MAAM,QAAA,EAAE,CAAC;AAC9C,CAAC;AAQD,MAAM,UAAU,oBAAoB,CAAI,EAAqE;QAAnE,sCAAgB,EAAE,oBAAO,EAAE,wBAAS;IAC5E,IAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IAC7C,IAAM,GAAG,GAAG,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAE/C,OAAO,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAC9D,CAAC;AAUD,MAAM,UAAU,sBAAsB,CAAI,EAAgH;QAA9G,sCAAgB,EAAE,sCAAgB,EAAE,oBAAO,EAAE,wBAAS,EAAE,gDAAqB;IACvH,IAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IAC7C,IAAM,GAAG,GAAG,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC/C,IAAM,cAAc,GAAG,qBAAqB,CAAC,CAAC,CAAC,qBAAqB,YAAG,GAAG,KAAA,EAAE,MAAM,QAAA,IAAK,gBAAgB,EAAG,CAAC,CAAC,CAAC,IAAI,CAAC;IAClH,OAAO,cAAc,IAAI,OAAO,CAAI,MAAM,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;AACrE,CAAC;AAaD,MAAM,UAAU,2BAA2B,CAAI,EAA4F;QAA1F,0CAAkB,EAAE,oBAAO,EAAE,wBAAS,EAAE,8BAAY;IACnG,IAAI,kBAAkB,KAAK,kBAAkB,CAAC,IAAI,EAAE;QAC1C,IAAA,sBAAG,EAAE,4BAAM,CAAkB;QACrC,IAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;QACpC,IAAM,iBAAiB,GAAG,GAAG,KAAK,YAAY,CAAC;QAC/C,IAAM,mBAAmB,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;QAEvC,IAAI,iBAAiB,EAAE;YACrB,IAAI,kBAAkB,KAAK,kBAAkB,CAAC,UAAU,EAAE;gBACxD,IAAM,SAAS,GAAG,MAAM,KAAK,SAAS,GAAG,CAAC,CAAC;gBAC3C,IAAI,CAAC,SAAS,EAAE;oBACd,OAAO;wBACL,GAAG,EAAE,CAAC;wBACN,MAAM,EAAE,MAAM,GAAG,CAAC;wBAClB,iBAAiB,EAAE,IAAI;qBACxB,CAAC;iBACH;aACF;iBAAM,IAAI,kBAAkB,KAAK,kBAAkB,CAAC,aAAa,EAAE;gBAClE,OAAO;oBACL,MAAM,QAAA;oBACN,GAAG,EAAE,CAAC;oBACN,iBAAiB,EAAE,IAAI;iBACxB,CAAC;aACH;SACF;aAAM,IAAI,mBAAmB,EAAE;YAC9B,IAAI,kBAAkB,KAAK,kBAAkB,CAAC,UAAU,EAAE;gBACxD,IAAM,UAAU,GAAG,MAAM,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,UAAU,EAAE;oBACf,OAAO;wBACL,MAAM,EAAE,MAAM,GAAG,CAAC;wBAClB,GAAG,EAAE,YAAY,GAAG,CAAC;wBACrB,iBAAiB,EAAE,IAAI;qBACxB,CAAC;iBACH;aACF;iBAAM,IAAI,kBAAkB,KAAK,kBAAkB,CAAC,aAAa,EAAE;gBAClE,OAAO;oBACL,MAAM,QAAA;oBACN,GAAG,EAAE,YAAY,GAAG,CAAC;oBACrB,iBAAiB,EAAE,IAAI;iBACxB,CAAC;aACH;SACF;KACF;IAED,6BAAY,YAAY,KAAE,iBAAiB,EAAE,KAAK,IAAG;AACvD,CAAC;AASD,MAAM,UAAU,WAAW,CAAI,KAA0B,EAAE,EAAiG;QAA/F,0CAAkB,EAAE,oBAAO,EAAE,wBAAS,EAAE,wBAAiC,EAAb,kBAAM,EAAE,YAAG;IAClI,8HAA8H;IAC9H,0GAA0G;IAC1G,IAAI,kBAAkB,KAAK,kBAAkB,CAAC,IAAI,IAAI,kBAAkB,KAAK,kBAAkB,CAAC,UAAU,EAAE;QAC1G,IAAM,eAAe,GAAG,GAAG,KAAK,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QACnD,IAAM,gBAAgB,GAAG,GAAG,KAAK,CAAC,CAAC;QACnC,IAAM,SAAS,GAAG,MAAM,KAAK,SAAS,GAAG,CAAC,CAAC;QAC3C,IAAM,UAAU,GAAG,MAAM,KAAK,CAAC,CAAC;QAChC,IAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC;QAEtC,OAAO,KAAK,CAAC,CAAC,CAAC,gBAAgB,IAAI,UAAU,CAAC,CAAC,CAAC,eAAe,IAAI,SAAS,CAAC;KAC9E;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,EAA+B;QAA7B,oBAAO,EAAE,4BAAW;IAC9D,OAAO,OAAO,CAAC,GAAG,KAAK,WAAW,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,CAAC;AAClF,CAAC","sourcesContent":["import { CellNavigationMode, Z_INDEXES } from '../common/enums';\nimport * as rowUtils from '../RowUtils';\nimport { isFrozen, canEdit } from '../ColumnUtils';\nimport { CalculatedColumn, Position, Range, Dimension, RowGetter } from '../common/types';\n\nconst getRowTop = (rowIdx: number, rowHeight: number): number => rowIdx * rowHeight;\n\ninterface getSelectedDimensionsOpts<R> {\n  selectedPosition: Position;\n  columns: CalculatedColumn<R>[];\n  rowHeight: number;\n  scrollLeft: number;\n}\n\nexport function getSelectedDimensions<R>({ selectedPosition: { idx, rowIdx }, columns, rowHeight, scrollLeft }: getSelectedDimensionsOpts<R>): Dimension {\n  if (idx < 0) {\n    return { width: 0, left: 0, top: 0, height: rowHeight, zIndex: 1 };\n  }\n  const column = columns[idx];\n  const frozen = isFrozen(column);\n  const { width } = column;\n  const left = frozen ? column.left + scrollLeft : column.left;\n  const top = getRowTop(rowIdx, rowHeight);\n  const zIndex = frozen ? Z_INDEXES.FROZEN_CELL_MASK : Z_INDEXES.CELL_MASK;\n  return { width, left, top, height: rowHeight, zIndex };\n}\n\ninterface getSelectedRangeDimensionsOpts<R> {\n  selectedRange: Range;\n  columns: CalculatedColumn<R>[];\n  rowHeight: number;\n}\n\nexport function getSelectedRangeDimensions<R>({ selectedRange: { topLeft, bottomRight }, columns, rowHeight }: getSelectedRangeDimensionsOpts<R>): Dimension {\n  if (topLeft.idx < 0) {\n    return { width: 0, left: 0, top: 0, height: rowHeight, zIndex: Z_INDEXES.CELL_MASK };\n  }\n\n  let width = 0;\n  let anyColFrozen = false;\n  for (let i = topLeft.idx; i <= bottomRight.idx; i++) {\n    const column = columns[i];\n    width += column.width;\n    anyColFrozen = anyColFrozen || isFrozen(column);\n  }\n\n  const { left } = columns[topLeft.idx];\n  const top = getRowTop(topLeft.rowIdx, rowHeight);\n  const height = (bottomRight.rowIdx - topLeft.rowIdx + 1) * rowHeight;\n  const zIndex = anyColFrozen ? Z_INDEXES.FROZEN_CELL_MASK : Z_INDEXES.CELL_MASK;\n\n  return { width, left, top, height, zIndex };\n}\n\ninterface getSelectedCellValueOpts<R> {\n  selectedPosition: Position;\n  columns: CalculatedColumn<R>[];\n  rowGetter: RowGetter<R>;\n}\n\nexport function getSelectedCellValue<R>({ selectedPosition, columns, rowGetter }: getSelectedCellValueOpts<R>) {\n  const column = columns[selectedPosition.idx];\n  const row = rowGetter(selectedPosition.rowIdx);\n\n  return row && column ? rowUtils.get(row, column.key) : null;\n}\n\ninterface isSelectedCellEditableOpts<R> {\n  enableCellSelect: boolean;\n  selectedPosition: Position;\n  columns: CalculatedColumn<R>[];\n  rowGetter: RowGetter<R>;\n  onCheckCellIsEditable?(arg: { row: R; column: CalculatedColumn<R> } & Position): boolean;\n}\n\nexport function isSelectedCellEditable<R>({ enableCellSelect, selectedPosition, columns, rowGetter, onCheckCellIsEditable }: isSelectedCellEditableOpts<R>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rowGetter(selectedPosition.rowIdx);\n  const isCellEditable = onCheckCellIsEditable ? onCheckCellIsEditable({ row, column, ...selectedPosition }) : true;\n  return isCellEditable && canEdit<R>(column, row, enableCellSelect);\n}\n\ninterface getNextSelectedCellPositionOpts<R> {\n  cellNavigationMode: CellNavigationMode;\n  columns: CalculatedColumn<R>[];\n  rowsCount: number;\n  nextPosition: Position;\n}\n\nexport interface NextSelectedCellPosition extends Position {\n  changeRowOrColumn: boolean;\n}\n\nexport function getNextSelectedCellPosition<R>({ cellNavigationMode, columns, rowsCount, nextPosition }: getNextSelectedCellPositionOpts<R>): NextSelectedCellPosition {\n  if (cellNavigationMode !== CellNavigationMode.NONE) {\n    const { idx, rowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === CellNavigationMode.CHANGE_ROW) {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          return {\n            idx: 0,\n            rowIdx: rowIdx + 1,\n            changeRowOrColumn: true\n          };\n        }\n      } else if (cellNavigationMode === CellNavigationMode.LOOP_OVER_ROW) {\n        return {\n          rowIdx,\n          idx: 0,\n          changeRowOrColumn: true\n        };\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === CellNavigationMode.CHANGE_ROW) {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          return {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1,\n            changeRowOrColumn: true\n          };\n        }\n      } else if (cellNavigationMode === CellNavigationMode.LOOP_OVER_ROW) {\n        return {\n          rowIdx,\n          idx: columnsCount - 1,\n          changeRowOrColumn: true\n        };\n      }\n    }\n  }\n\n  return { ...nextPosition, changeRowOrColumn: false };\n}\n\ninterface canExitGridOpts<R> {\n  cellNavigationMode: CellNavigationMode;\n  columns: CalculatedColumn<R>[];\n  rowsCount: number;\n  selectedPosition: Position;\n}\n\nexport function canExitGrid<R>(event: React.KeyboardEvent, { cellNavigationMode, columns, rowsCount, selectedPosition: { rowIdx, idx } }: canExitGridOpts<R>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === CellNavigationMode.NONE || cellNavigationMode === CellNavigationMode.CHANGE_ROW) {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n    const shift = event.shiftKey === true;\n\n    return shift ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n\nexport function selectedRangeIsSingleCell({ topLeft, bottomRight }: Range): boolean {\n  return topLeft.idx === bottomRight.idx && topLeft.rowIdx === bottomRight.rowIdx;\n}\n"]}