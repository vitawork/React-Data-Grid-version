{"version":3,"file":"InteractionMasks.js","sourceRoot":"","sources":["../../src/masks/InteractionMasks.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { cloneElement } from 'react';\nimport { isElement } from 'react-is';\n\n// Components\nimport SelectionMask from './SelectionMask';\nimport SelectionRangeMask from './SelectionRangeMask';\nimport CopyMask from './CopyMask';\nimport DragMask, { DraggedPosition } from './DragMask';\nimport DragHandle from './DragHandle';\nimport EditorContainer from '../common/editors/EditorContainer';\nimport EditorPortal from '../common/editors/EditorPortal';\n\n// Utils\nimport { isKeyPrintable, isCtrlKeyHeldDown } from '../common/utils/keyboardUtils';\nimport {\n  getSelectedDimensions,\n  getSelectedCellValue,\n  getSelectedRangeDimensions,\n  getNextSelectedCellPosition,\n  canExitGrid,\n  isSelectedCellEditable,\n  selectedRangeIsSingleCell,\n  NextSelectedCellPosition\n} from '../utils/SelectedCellUtils';\nimport { isFrozen } from '../ColumnUtils';\nimport keyCodes from '../KeyCodes';\n\n// Types\nimport { UpdateActions, CellNavigationMode, EventTypes } from '../common/enums';\nimport { CalculatedColumn, Position, SelectedRange, Dimension, InteractionMasksMetaData, CommitEvent } from '../common/types';\nimport { CanvasProps } from '../Canvas';\n\nconst SCROLL_CELL_BUFFER = 2;\n\ninterface NavAction {\n  getNext(current: Position): Position;\n  isCellAtBoundary(cell: Position): boolean;\n  onHitBoundary(next: Position): void;\n}\n\ntype SharedCanvasProps<R> = Pick<CanvasProps<R>,\n'rowGetter'\n| 'rowsCount'\n| 'rowHeight'\n| 'columns'\n| 'rowVisibleStartIdx'\n| 'rowVisibleEndIdx'\n| 'colVisibleStartIdx'\n| 'colVisibleEndIdx'\n| 'enableCellSelect'\n| 'enableCellAutoFocus'\n| 'cellNavigationMode'\n| 'eventBus'\n| 'contextMenu'\n| 'editorPortalTarget'\n>;\n\nexport interface InteractionMasksProps<R> extends SharedCanvasProps<R>, InteractionMasksMetaData<R> {\n  onHitTopBoundary(): void;\n  onHitBottomBoundary(): void;\n  onHitLeftBoundary(position: Position): void;\n  onHitRightBoundary(position: Position): void;\n  scrollLeft: number;\n  scrollTop: number;\n  getRowHeight(rowIdx: number): number;\n  getRowTop(rowIdx: number): number;\n  getRowColumns(rowIdx: number): CalculatedColumn<R>[];\n}\n\nexport interface InteractionMasksState {\n  selectedPosition: Position;\n  selectedRange: SelectedRange;\n  copiedPosition: Position & { value: unknown } | null;\n  draggedPosition: DraggedPosition | null;\n  editorPosition: { top: number; left: number } | null;\n  isEditorEnabled: boolean;\n  firstEditorKeyPress: string | null;\n}\n\nexport default class InteractionMasks<R> extends React.Component<InteractionMasksProps<R>, InteractionMasksState> {\n  static displayName = 'InteractionMasks';\n\n  readonly state: Readonly<InteractionMasksState> = {\n    selectedPosition: {\n      idx: -1,\n      rowIdx: -1\n    },\n    selectedRange: {\n      topLeft: {\n        idx: -1, rowIdx: -1\n      },\n      bottomRight: {\n        idx: -1, rowIdx: -1\n      },\n      startCell: null,\n      cursorCell: null,\n      isDragging: false\n    },\n    copiedPosition: null,\n    draggedPosition: null,\n    editorPosition: null,\n    isEditorEnabled: false,\n    firstEditorKeyPress: null\n  };\n\n  private readonly selectionMask = React.createRef<HTMLDivElement>();\n  private readonly copyMask = React.createRef<HTMLDivElement>();\n\n  private unsubscribeEventHandlers: Array<() => void> = [];\n\n  componentDidUpdate(prevProps: InteractionMasksProps<R>, prevState: InteractionMasksState) {\n    const { selectedPosition, isEditorEnabled } = this.state;\n    const { selectedPosition: prevSelectedPosition, isEditorEnabled: prevIsEditorEnabled } = prevState;\n    const isSelectedPositionChanged = selectedPosition !== prevSelectedPosition && (selectedPosition.rowIdx !== prevSelectedPosition.rowIdx || selectedPosition.idx !== prevSelectedPosition.idx);\n    const isEditorClosed = isEditorEnabled !== prevIsEditorEnabled && !isEditorEnabled;\n\n    if (isSelectedPositionChanged) {\n      // Call event handlers if selected cell has changed\n      const { onCellSelected, onCellDeSelected } = this.props;\n      if (onCellDeSelected && this.isCellWithinBounds(prevSelectedPosition)) {\n        onCellDeSelected({ ...prevSelectedPosition });\n      }\n\n      if (onCellSelected && this.isCellWithinBounds(selectedPosition)) {\n        onCellSelected({ ...selectedPosition });\n      }\n    }\n\n    if ((isSelectedPositionChanged && this.isCellWithinBounds(selectedPosition)) || isEditorClosed) {\n      this.focus();\n    }\n  }\n\n  componentDidMount() {\n    const { eventBus, enableCellAutoFocus } = this.props;\n\n    this.unsubscribeEventHandlers = [\n      eventBus.subscribe(EventTypes.SELECT_CELL, this.selectCell),\n      eventBus.subscribe(EventTypes.SELECT_START, this.onSelectCellRangeStarted),\n      eventBus.subscribe(EventTypes.SELECT_UPDATE, this.onSelectCellRangeUpdated),\n      eventBus.subscribe(EventTypes.SELECT_END, this.onSelectCellRangeEnded),\n      eventBus.subscribe(EventTypes.DRAG_ENTER, this.handleDragEnter)\n    ];\n\n    if (enableCellAutoFocus && this.isFocusedOnBody()) {\n      this.selectFirstCell();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeEventHandlers.forEach(h => h());\n  }\n\n  getEditorPosition() {\n    if (!this.selectionMask.current) return null;\n\n    const { editorPortalTarget } = this.props;\n    const { left: selectionMaskLeft, top: selectionMaskTop } = this.selectionMask.current.getBoundingClientRect();\n    if (editorPortalTarget === document.body) {\n      const { scrollLeft, scrollTop } = document.scrollingElement || document.documentElement;\n      return {\n        left: selectionMaskLeft + scrollLeft,\n        top: selectionMaskTop + scrollTop\n      };\n    }\n\n    const { left: portalTargetLeft, top: portalTargetTop } = editorPortalTarget.getBoundingClientRect();\n    const { scrollLeft, scrollTop } = editorPortalTarget;\n    return {\n      left: selectionMaskLeft - portalTargetLeft + scrollLeft,\n      top: selectionMaskTop - portalTargetTop + scrollTop\n    };\n  }\n\n  setMaskScollLeft(mask: HTMLDivElement | null, position: Position | null, scrollLeft: number): void {\n    if (!mask || !position) return;\n\n    const { idx, rowIdx } = position;\n    if (!(idx >= 0 && rowIdx >= 0)) return;\n\n    const column = this.props.columns[idx];\n    if (!isFrozen(column)) return;\n\n    const top = this.props.getRowTop(rowIdx);\n    const left = scrollLeft + column.left;\n    const transform = `translate(${left}px, ${top}px)`;\n    if (mask.style.transform !== transform) {\n      mask.style.transform = transform;\n    }\n  }\n\n  /**\n   * Sets the position of SelectionMask and CopyMask components when the canvas is scrolled\n   * This is only required on the frozen columns\n   */\n  setScrollLeft(scrollLeft: number): void {\n    this.setMaskScollLeft(this.selectionMask.current, this.state.selectedPosition, scrollLeft);\n    this.setMaskScollLeft(this.copyMask.current, this.state.copiedPosition, scrollLeft);\n  }\n\n  onKeyDown = (e: React.KeyboardEvent<HTMLDivElement>): void => {\n    if (isCtrlKeyHeldDown(e)) {\n      this.onPressKeyWithCtrl(e);\n    } else if (e.keyCode === keyCodes.Escape) {\n      this.onPressEscape();\n    } else if (e.keyCode === keyCodes.Tab) {\n      this.onPressTab(e);\n    } else if (this.isKeyboardNavigationEvent(e)) {\n      this.changeCellFromEvent(e);\n    } else if (isKeyPrintable(e.keyCode) || ([keyCodes.Backspace, keyCodes.Delete, keyCodes.Enter] as number[]).includes(e.keyCode)) {\n      this.openEditor(e);\n    }\n  };\n\n  isSelectedCellEditable(): boolean {\n    const { enableCellSelect, columns, rowGetter, onCheckCellIsEditable } = this.props;\n    const { selectedPosition } = this.state;\n    return isSelectedCellEditable<R>({ enableCellSelect, columns, rowGetter, selectedPosition, onCheckCellIsEditable });\n  }\n\n  openEditor = (event?: React.KeyboardEvent<HTMLDivElement>): void => {\n    if (this.isSelectedCellEditable() && !this.state.isEditorEnabled) {\n      this.setState({\n        isEditorEnabled: true,\n        firstEditorKeyPress: event ? event.key : null,\n        editorPosition: this.getEditorPosition()\n      });\n    }\n  };\n\n  closeEditor(): void {\n    this.setState({\n      isEditorEnabled: false,\n      firstEditorKeyPress: null,\n      editorPosition: null\n    });\n  }\n\n  onPressKeyWithCtrl({ keyCode }: React.KeyboardEvent<HTMLDivElement>): void {\n    if (this.copyPasteEnabled()) {\n      if (keyCode === keyCodes.c) {\n        const { columns, rowGetter } = this.props;\n        const { selectedPosition } = this.state;\n        const value = getSelectedCellValue({ selectedPosition, columns, rowGetter });\n        this.handleCopy(value);\n      } else if (keyCode === keyCodes.v) {\n        this.handlePaste();\n      }\n    }\n  }\n\n  onFocus = (): void => {\n    const { idx, rowIdx } = this.state.selectedPosition;\n    if (idx === -1 && rowIdx === -1) {\n      this.selectFirstCell();\n    }\n  };\n\n  onPressTab(e: React.KeyboardEvent<HTMLDivElement>): void {\n    const { cellNavigationMode, columns, rowsCount } = this.props;\n    const { selectedPosition, isEditorEnabled } = this.state;\n    // When there are no rows in the grid, we need to allow the browser to handle tab presses\n    if (rowsCount === 0) {\n      return;\n    }\n\n    // If we are in a position to leave the grid, stop editing but stay in that cell\n    if (canExitGrid(e, { cellNavigationMode, columns, rowsCount, selectedPosition })) {\n      if (isEditorEnabled) {\n        this.closeEditor();\n        return;\n      }\n\n      // Reset the selected position before exiting\n      this.setState({ selectedPosition: { idx: -1, rowIdx: -1 } });\n      return;\n    }\n\n    this.changeCellFromEvent(e);\n  }\n\n  onPressEscape(): void {\n    if (this.copyPasteEnabled()) {\n      this.handleCancelCopy();\n      this.closeEditor();\n    }\n  }\n\n  copyPasteEnabled(): boolean {\n    return this.props.onCellCopyPaste !== null && this.isSelectedCellEditable();\n  }\n\n  handleCopy(value: unknown): void {\n    const { rowIdx, idx } = this.state.selectedPosition;\n    this.setState({\n      copiedPosition: { rowIdx, idx, value }\n    });\n  }\n\n  handleCancelCopy(): void {\n    this.setState({ copiedPosition: null });\n  }\n\n  handlePaste(): void {\n    const { columns, onCellCopyPaste, onGridRowsUpdated } = this.props;\n    const { selectedPosition, copiedPosition } = this.state;\n    const { rowIdx: toRow } = selectedPosition;\n\n    if (copiedPosition === null) {\n      return;\n    }\n\n    const cellKey = columns[selectedPosition.idx].key;\n    const { rowIdx: fromRow, value } = copiedPosition;\n\n    if (onCellCopyPaste) {\n      onCellCopyPaste({\n        cellKey,\n        rowIdx: toRow,\n        fromRow,\n        toRow,\n        value\n      });\n    }\n\n    onGridRowsUpdated(cellKey, toRow, toRow, { [cellKey]: value }, UpdateActions.COPY_PASTE, fromRow);\n  }\n\n  isKeyboardNavigationEvent(e: React.KeyboardEvent<HTMLDivElement>): boolean {\n    return this.getKeyNavActionFromEvent(e) !== null;\n  }\n\n  getKeyNavActionFromEvent(e: React.KeyboardEvent<HTMLDivElement>): NavAction | null {\n    const { rowVisibleEndIdx, rowVisibleStartIdx, colVisibleEndIdx, colVisibleStartIdx, onHitBottomBoundary, onHitRightBoundary, onHitLeftBoundary, onHitTopBoundary } = this.props;\n    const isCellAtBottomBoundary = (cell: Position): boolean => cell.rowIdx >= rowVisibleEndIdx - SCROLL_CELL_BUFFER;\n    const isCellAtTopBoundary = (cell: Position): boolean => cell.rowIdx !== 0 && cell.rowIdx <= rowVisibleStartIdx - 1;\n    const isCellAtRightBoundary = (cell: Position): boolean => cell.idx !== 0 && cell.idx >= colVisibleEndIdx - 1;\n    const isCellAtLeftBoundary = (cell: Position): boolean => cell.idx !== 0 && cell.idx <= colVisibleStartIdx + 1;\n\n    const ArrowDown: NavAction = {\n      getNext: (current) => ({ ...current, rowIdx: current.rowIdx + 1 }),\n      isCellAtBoundary: isCellAtBottomBoundary,\n      onHitBoundary: onHitBottomBoundary\n    };\n    const ArrowUp: NavAction = {\n      getNext: (current) => ({ ...current, rowIdx: current.rowIdx - 1 }),\n      isCellAtBoundary: isCellAtTopBoundary,\n      onHitBoundary: onHitTopBoundary\n    };\n    const ArrowRight: NavAction = {\n      getNext: (current) => ({ ...current, idx: current.idx + 1 }),\n      isCellAtBoundary: isCellAtRightBoundary,\n      onHitBoundary(next) {\n        onHitRightBoundary(next);\n        // Selected cell can hit the bottom boundary when the cellNavigationMode is 'changeRow'\n        if (isCellAtBottomBoundary(next)) {\n          onHitBottomBoundary();\n        }\n      }\n    };\n    const ArrowLeft: NavAction = {\n      getNext: (current) => ({ ...current, idx: current.idx - 1 }),\n      isCellAtBoundary: isCellAtLeftBoundary,\n      onHitBoundary(next) {\n        onHitLeftBoundary(next);\n        // Selected cell can hit the top boundary when the cellNavigationMode is 'changeRow'\n        if (isCellAtTopBoundary(next)) {\n          onHitTopBoundary();\n        }\n      }\n    };\n\n    if (e.keyCode === keyCodes.Tab) {\n      return e.shiftKey === true ? ArrowLeft : ArrowRight;\n    }\n\n    switch (e.key) {\n      case 'ArrowDown': return ArrowDown;\n      case 'ArrowUp': return ArrowUp;\n      case 'ArrowRight': return ArrowRight;\n      case 'ArrowLeft': return ArrowLeft;\n      default: return null;\n    }\n  }\n\n  changeCellFromEvent(e: React.KeyboardEvent<HTMLDivElement>): void {\n    e.preventDefault();\n    const isTab = e.keyCode === keyCodes.Tab;\n    const isShift = e.shiftKey;\n\n    if (isTab) {\n      const cellNavigationMode = this.props.cellNavigationMode === CellNavigationMode.NONE\n        ? CellNavigationMode.CHANGE_ROW\n        : this.props.cellNavigationMode;\n      this.changeCellFromKeyAction(e, cellNavigationMode);\n    } else if (isShift) {\n      this.changeSelectedRangeFromArrowKeyAction(e);\n    } else {\n      this.changeCellFromKeyAction(e, this.props.cellNavigationMode);\n    }\n  }\n\n  changeCellFromKeyAction(e: React.KeyboardEvent<HTMLDivElement>, cellNavigationMode: CellNavigationMode): void {\n    const keyNavAction = this.getKeyNavActionFromEvent(e);\n    if (keyNavAction) {\n      const currentPosition = this.state.selectedPosition;\n      const next = this.getNextSelectedCellPositionForKeyNavAction(keyNavAction, currentPosition, cellNavigationMode);\n      this.checkIsAtGridBoundary(keyNavAction, next);\n      this.selectCell(next);\n    }\n  }\n\n  changeSelectedRangeFromArrowKeyAction(e: React.KeyboardEvent<HTMLDivElement>): void {\n    const keyNavAction = this.getKeyNavActionFromEvent(e);\n    if (keyNavAction) {\n      const { cellNavigationMode } = this.props;\n      const currentPosition = this.state.selectedRange.cursorCell || this.state.selectedPosition;\n      const next = this.getNextSelectedCellPositionForKeyNavAction(keyNavAction, currentPosition, cellNavigationMode);\n      this.checkIsAtGridBoundary(keyNavAction, next);\n      this.onSelectCellRangeUpdated({ ...next }, true, () => { this.onSelectCellRangeEnded(); });\n    }\n  }\n\n  getNextSelectedCellPositionForKeyNavAction(keyNavAction: NavAction, currentPosition: Position, cellNavigationMode: CellNavigationMode): NextSelectedCellPosition {\n    const { getNext } = keyNavAction;\n    const nextPosition = getNext(currentPosition);\n    const { columns, rowsCount } = this.props;\n    return getNextSelectedCellPosition({\n      columns,\n      rowsCount,\n      cellNavigationMode,\n      nextPosition\n    });\n  }\n\n  checkIsAtGridBoundary(keyNavAction: NavAction, next: NextSelectedCellPosition): void {\n    const { isCellAtBoundary, onHitBoundary } = keyNavAction;\n    const { changeRowOrColumn, ...nextPos } = next;\n    if (isCellAtBoundary(nextPos) || changeRowOrColumn) {\n      onHitBoundary(nextPos);\n    }\n  }\n\n  isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    const { columns, rowsCount } = this.props;\n    return rowIdx >= 0 && rowIdx < rowsCount && idx >= 0 && idx < columns.length;\n  }\n\n  isGridSelected(): boolean {\n    return this.isCellWithinBounds(this.state.selectedPosition);\n  }\n\n  isFocused(): boolean {\n    return document.activeElement === this.selectionMask.current;\n  }\n\n  isFocusedOnBody(): boolean {\n    return document.activeElement === document.body;\n  }\n\n  focus(): void {\n    if (this.selectionMask.current && !this.isFocused()) {\n      this.selectionMask.current.focus();\n    }\n  }\n\n  selectFirstCell(): void {\n    this.selectCell({ rowIdx: 0, idx: 0 });\n  }\n\n  selectCell = (cell: Position, openEditor?: boolean): void => {\n    const callback = openEditor ? this.openEditor : undefined;\n    // Close the editor to commit any pending changes\n    if (this.state.isEditorEnabled) {\n      this.closeEditor();\n    }\n    this.setState(() => {\n      if (!this.isCellWithinBounds(cell)) return null;\n\n      return {\n        selectedPosition: cell,\n        selectedRange: {\n          topLeft: cell,\n          bottomRight: cell,\n          startCell: cell,\n          cursorCell: cell,\n          isDragging: false\n        }\n      };\n    }, callback);\n  };\n\n  createSingleCellSelectedRange(cellPosition: Position, isDragging: boolean): SelectedRange {\n    return {\n      topLeft: cellPosition,\n      bottomRight: cellPosition,\n      startCell: cellPosition,\n      cursorCell: cellPosition,\n      isDragging\n    };\n  }\n\n  onSelectCellRangeStarted = (selectedPosition: Position): void => {\n    this.setState({\n      selectedRange: this.createSingleCellSelectedRange(selectedPosition, true),\n      selectedPosition\n    }, () => {\n      if (this.props.onCellRangeSelectionStarted) {\n        this.props.onCellRangeSelectionStarted(this.state.selectedRange);\n      }\n    });\n  };\n\n  onSelectCellRangeUpdated = (cellPosition: Position, isFromKeyboard?: boolean, callback?: () => void): void => {\n    if (!this.state.selectedRange.isDragging && !isFromKeyboard || !this.isCellWithinBounds(cellPosition)) {\n      return;\n    }\n\n    const startCell = this.state.selectedRange.startCell || this.state.selectedPosition;\n    const colIdxs = [startCell.idx, cellPosition.idx].sort((a, b) => a - b);\n    const rowIdxs = [startCell.rowIdx, cellPosition.rowIdx].sort((a, b) => a - b);\n    const topLeft: Position = { idx: colIdxs[0], rowIdx: rowIdxs[0] };\n    const bottomRight: Position = { idx: colIdxs[1], rowIdx: rowIdxs[1] };\n\n    const selectedRange: SelectedRange = {\n      ...this.state.selectedRange,\n      // default the startCell to the selected cell, in case we've just started via keyboard\n      startCell: this.state.selectedRange.startCell || this.state.selectedPosition,\n      // assign the new state - the bounds of the range, and the new cursor cell\n      topLeft,\n      bottomRight,\n      cursorCell: cellPosition\n    };\n\n    this.setState({\n      selectedRange\n    }, () => {\n      if (this.props.onCellRangeSelectionUpdated) {\n        this.props.onCellRangeSelectionUpdated(this.state.selectedRange);\n      }\n      if (callback) {\n        callback();\n      }\n    });\n  };\n\n  onSelectCellRangeEnded = (): void => {\n    const selectedRange = { ...this.state.selectedRange, isDragging: false };\n    this.setState({ selectedRange }, () => {\n      if (this.props.onCellRangeSelectionCompleted) {\n        this.props.onCellRangeSelectionCompleted(this.state.selectedRange);\n      }\n\n      // Focus the InteractionMasks, so it can receive keyboard events\n      this.focus();\n    });\n  };\n\n  isDragEnabled(): boolean {\n    return this.isSelectedCellEditable();\n  }\n\n  handleDragStart = (e: React.DragEvent<HTMLDivElement>): void => {\n    const { selectedPosition } = this.state;\n    // To prevent dragging down/up when reordering rows. (TODO: is this required)\n    if (selectedPosition.idx > -1) {\n      e.dataTransfer.effectAllowed = 'copy';\n      // Setting data is required to make an element draggable in FF\n      const transferData = JSON.stringify(selectedPosition);\n      try {\n        e.dataTransfer.setData('text/plain', transferData);\n      } catch (ex) {\n        // IE only supports 'text' and 'URL' for the 'type' argument\n        e.dataTransfer.setData('text', transferData);\n      }\n      this.setState({\n        draggedPosition: {\n          ...selectedPosition,\n          overRowIdx: selectedPosition.rowIdx\n        }\n      });\n    }\n  };\n\n  handleDragEnter = (overRowIdx: number): void => {\n    this.setState(({ draggedPosition }) => {\n      if (draggedPosition) {\n        return { draggedPosition: { ...draggedPosition, overRowIdx } };\n      }\n      return null;\n    });\n  };\n\n  handleDragEnd = () => {\n    const { draggedPosition } = this.state;\n    if (draggedPosition === null) return;\n\n    const { rowIdx, overRowIdx } = draggedPosition;\n    const { columns, onGridRowsUpdated, rowGetter } = this.props;\n    const column = columns[draggedPosition.idx];\n    const value = getSelectedCellValue({ selectedPosition: draggedPosition, columns, rowGetter });\n    const cellKey = column.key;\n    const fromRow = rowIdx < overRowIdx ? rowIdx : overRowIdx;\n    const toRow = rowIdx > overRowIdx ? rowIdx : overRowIdx;\n\n    onGridRowsUpdated(cellKey, fromRow, toRow, { [cellKey]: value }, UpdateActions.CELL_DRAG);\n\n    this.setState({\n      draggedPosition: null\n    });\n  };\n\n  onDragHandleDoubleClick = (): void => {\n    const { onDragHandleDoubleClick, rowGetter } = this.props;\n    const { selectedPosition } = this.state;\n    const { idx, rowIdx } = selectedPosition;\n    const rowData = rowGetter(selectedPosition.rowIdx);\n    onDragHandleDoubleClick({ idx, rowIdx, rowData });\n  };\n\n  onCommit = (args: CommitEvent<R>): void => {\n    this.props.onCommit(args);\n    this.closeEditor();\n  };\n\n  onCommitCancel = (): void => {\n    this.closeEditor();\n  };\n\n  getSelectedDimensions = (selectedPosition: Position, useGridColumns?: boolean): Dimension => {\n    const { scrollLeft, getRowHeight, getRowTop, getRowColumns, columns: gridColumns } = this.props;\n    const columns = useGridColumns ? gridColumns : getRowColumns(selectedPosition.rowIdx);\n    const top = getRowTop(selectedPosition.rowIdx);\n    const rowHeight = getRowHeight(selectedPosition.rowIdx);\n    const dimension = getSelectedDimensions({ selectedPosition, columns, scrollLeft, rowHeight });\n    dimension.top = top;\n    return dimension;\n  };\n\n  renderSingleCellSelectView() {\n    return (\n      !this.state.isEditorEnabled && this.isGridSelected() && (\n        <SelectionMask\n          {...this.getSelectedDimensions(this.state.selectedPosition, true)}\n          ref={this.selectionMask}\n        >\n          {this.isDragEnabled() && (\n            <DragHandle\n              onDragStart={this.handleDragStart}\n              onDragEnd={this.handleDragEnd}\n              onDoubleClick={this.onDragHandleDoubleClick}\n            />\n          )}\n        </SelectionMask>\n      )\n    );\n  }\n\n  renderCellRangeSelectView() {\n    const { columns, rowHeight } = this.props;\n    return (\n      <>\n        <SelectionRangeMask\n          {...getSelectedRangeDimensions({ selectedRange: this.state.selectedRange, columns, rowHeight })}\n        />\n        <SelectionMask\n          {...this.getSelectedDimensions(this.state.selectedPosition, true)}\n          ref={this.selectionMask}\n        />\n      </>\n    );\n  }\n\n  render() {\n    const { rowGetter, contextMenu, getRowColumns, scrollLeft, scrollTop } = this.props;\n    const { isEditorEnabled, firstEditorKeyPress, selectedPosition, draggedPosition, copiedPosition } = this.state;\n    const rowData = rowGetter(selectedPosition.rowIdx);\n    const columns = getRowColumns(selectedPosition.rowIdx);\n    return (\n      <div\n        onKeyDown={this.onKeyDown}\n        onFocus={this.onFocus}\n      >\n        {copiedPosition && (\n          <CopyMask\n            {...this.getSelectedDimensions(copiedPosition)}\n            ref={this.copyMask}\n          />\n        )}\n        {draggedPosition && (\n          <DragMask\n            draggedPosition={draggedPosition}\n            getSelectedDimensions={this.getSelectedDimensions}\n          />\n        )}\n        {selectedRangeIsSingleCell(this.state.selectedRange)\n          ? this.renderSingleCellSelectView()\n          : this.renderCellRangeSelectView()\n        }\n        {isEditorEnabled && (\n          <EditorPortal target={this.props.editorPortalTarget}>\n            <EditorContainer<R>\n              firstEditorKeyPress={firstEditorKeyPress}\n              onCommit={this.onCommit}\n              onCommitCancel={this.onCommitCancel}\n              rowIdx={selectedPosition.rowIdx}\n              value={getSelectedCellValue({ selectedPosition, columns, rowGetter })!}\n              rowData={rowData}\n              column={columns[selectedPosition.idx]}\n              scrollLeft={scrollLeft}\n              scrollTop={scrollTop}\n              {...this.getSelectedDimensions(selectedPosition)}\n              {...this.state.editorPosition}\n            />\n          </EditorPortal>\n        )}\n        {isElement(contextMenu) && cloneElement(contextMenu, { ...selectedPosition })}\n      </div>\n    );\n  }\n}\n"]}