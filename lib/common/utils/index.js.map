{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/common/utils/index.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,WAAW,CAAC;AAElC,MAAM,UAAU,kBAAkB,CAAC,OAAgB;IACjD,OAAO,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACxC,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,GAAY;IACvC,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC;AAChD,CAAC;AAED,MAAM,UAAU,UAAU,CAAI,eAAkB;IAC9C,OAAO,eAAe,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,mBAAmB,CAAC;AACtF,CAAC;AAED,MAAM,UAAU,aAAa,CAAe,GAAM;IAChD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,WAAW,KAAK,MAAM,CAAC;AACrE,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAI,WAAc;IACrD,OAAO,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,0BAA0B,CAAC,WAAoB;IAC7D,OAAO;QACL,QAAQ,EAAE,WAAW;YACnB,CAAC,CAAC,UAAC,SAAyC,EAAE,GAAW,IAAK,OAAA,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAlB,CAAkB;YAChF,CAAC,CAAC,UAAI,IAAO,EAAE,GAAY,IAAoB,OAAA,IAAI,CAAC,GAAG,CAAC,EAAT,CAAS;KAC3D,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,IAAM,cAAc,GAAG,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC","sourcesContent":["import Immutable from 'immutable';\n\nexport function isColumnsImmutable(columns: unknown): columns is Immutable.List<unknown> {\n  return Immutable.List.isList(columns);\n}\n\nexport function isEmptyArray(obj: unknown): boolean {\n  return Array.isArray(obj) && obj.length === 0;\n}\n\nexport function isFunction<T>(functionToCheck: T): boolean {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\nexport function isEmptyObject<T extends {}>(obj: T): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nexport function isImmutableCollection<T>(objToVerify: T): boolean {\n  return Immutable.Iterable.isIterable(objToVerify);\n}\n\nexport function getMixedTypeValueRetriever(isImmutable: boolean) {\n  return {\n    getValue: isImmutable\n      ? (immutable: Immutable.Map<string, unknown>, key: string) => immutable.get(key)\n      : <T>(item: T, key: keyof T): T[typeof key] => item[key]\n  };\n}\n\nexport const isImmutableMap = Immutable.Map.isMap;\n"]}