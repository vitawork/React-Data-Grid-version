{"version":3,"file":"GridPropHelpers.js","sourceRoot":"","sources":["../../../src/helpers/test/GridPropHelpers.ts"],"names":[],"mappings":"AASA,IAAM,OAAO,GAA4B,CAAC;QACxC,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,IAAI;QACT,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,GAAG;QACV,IAAI,EAAE,CAAC;KACR,EAAE;QACD,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,OAAO;QACZ,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,GAAG;QACV,IAAI,EAAE,GAAG;KACV,EAAE;QACD,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,OAAO;QACZ,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,GAAG;QACV,IAAI,EAAE,GAAG;KACV,CAAC,CAAC;AAEH,IAAM,KAAK,GAAU,EAAE,CAAC;AACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;IAC7B,KAAK,CAAC,IAAI,CAAC;QACT,EAAE,EAAE,CAAC;QACL,KAAK,EAAE,WAAS,CAAG;QACnB,KAAK,EAAE,CAAC,GAAG,IAAI;KAChB,CAAC,CAAC;CACJ;AAED,eAAe;IACb,OAAO,SAAA;IACP,SAAS,EAAT,UAAU,CAAS;QACjB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IACD,SAAS;QACP,OAAO,KAAK,CAAC,MAAM,CAAC;IACtB,CAAC;IACD,YAAY,EAAE;QACZ,QAAQ,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;QAC/B,OAAO,EAAE,IAAI;QACb,MAAM,EAAE,IAAI;KACb;CACF,CAAC;AAEF,MAAM,CAAC,IAAM,gBAAgB,GAAsB;IACjD,MAAM,EAAE,IAAI;IACZ,WAAW,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;IACvB,eAAe,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;IAC3B,YAAY,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;IACxB,gBAAgB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;IAC5B,iBAAiB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;IAC7B,iBAAiB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;IAC7B,iBAAiB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;IAC7B,WAAW,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;CACxB,CAAC","sourcesContent":["import { CalculatedColumn, CellMetaData } from '../../common/types';\n\nexport interface Row {\n  id?: number;\n  title?: string;\n  count?: number;\n  description?: string;\n}\n\nconst columns: CalculatedColumn<Row>[] = [{\n  idx: 0,\n  key: 'id',\n  name: 'ID',\n  width: 100,\n  left: 0\n}, {\n  idx: 1,\n  key: 'title',\n  name: 'Title',\n  width: 100,\n  left: 100\n}, {\n  idx: 2,\n  key: 'count',\n  name: 'Count',\n  width: 100,\n  left: 200\n}];\n\nconst _rows: Row[] = [];\nfor (let i = 0; i < 1000; i++) {\n  _rows.push({\n    id: i,\n    title: `Title ${i}`,\n    count: i * 1000\n  });\n}\n\nexport default {\n  columns,\n  rowGetter(i: number) {\n    return _rows[i];\n  },\n  rowsCount() {\n    return _rows.length;\n  },\n  cellMetaData: {\n    selected: { idx: 2, rowIdx: 3 },\n    dragged: null,\n    copied: null\n  }\n};\n\nexport const fakeCellMetaData: CellMetaData<Row> = {\n  rowKey: 'id',\n  onCellClick: () => null,\n  onCellMouseDown: () => null,\n  onCellExpand: () => null,\n  onCellMouseEnter: () => null,\n  onCellContextMenu: () => null,\n  onRowExpandToggle: () => null,\n  onCellDoubleClick: () => null,\n  onDragEnter: () => null\n};\n"]}