{"version":3,"file":"Cell.js","sourceRoot":"","sources":["../src/Cell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { SubRowOptions, ColumnEventInfo, CellRenderer, CellRendererProps } from './common/types';\nimport CellActions from './Cell/CellActions';\nimport CellExpand from './Cell/CellExpander';\nimport CellContent from './Cell/CellContent';\nimport { isFrozen } from './ColumnUtils';\n\nfunction getSubRowOptions<R>({ rowIdx, idx, rowData, expandableOptions: expandArgs }: Props<R>): SubRowOptions<R> {\n  return { rowIdx, idx, rowData, expandArgs };\n}\n\nexport interface Props<R> extends CellRendererProps<R> {\n  // TODO: Check if these props are required or not. These are most likely set by custom cell renderer\n  className?: string;\n  tooltip?: string | null;\n  cellControls?: unknown;\n}\n\nexport default class Cell<R> extends React.PureComponent<Props<R>> implements CellRenderer {\n  static defaultProps = {\n    value: ''\n  };\n\n  private readonly cell = React.createRef<HTMLDivElement>();\n\n  componentDidMount() {\n    this.checkScroll();\n  }\n\n  componentDidUpdate(prevProps: Props<R>) {\n    if (isFrozen(prevProps.column) && !isFrozen(this.props.column)) {\n      this.removeScroll();\n    }\n  }\n\n  handleCellClick = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    cellMetaData.onCellClick({ idx, rowIdx });\n  };\n\n  handleCellMouseDown = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    if (cellMetaData.onCellMouseDown) {\n      cellMetaData.onCellMouseDown({ idx, rowIdx });\n    }\n  };\n\n  handleCellMouseEnter = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    if (cellMetaData.onCellMouseEnter) {\n      cellMetaData.onCellMouseEnter({ idx, rowIdx });\n    }\n  };\n\n  handleCellContextMenu = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    cellMetaData.onCellContextMenu({ idx, rowIdx });\n  };\n\n  handleCellDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    const { idx, rowIdx, cellMetaData } = this.props;\n    cellMetaData.onCellDoubleClick({ idx, rowIdx });\n  };\n\n  handleCellExpand = () => {\n    const { onCellExpand } = this.props.cellMetaData;\n    if (onCellExpand) {\n      onCellExpand(getSubRowOptions(this.props));\n    }\n  };\n\n  handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n  };\n\n  getStyle(): React.CSSProperties {\n    return {\n      width: this.props.column.width,\n      height: this.props.height,\n      left: this.props.column.left\n    };\n  }\n\n  getCellClass() {\n    const { idx, column, lastFrozenColumnIndex, isRowSelected, tooltip, expandableOptions } = this.props;\n    return classNames(\n      column.cellClass,\n      'react-grid-Cell',\n      this.props.className, {\n        'react-grid-Cell--frozen': isFrozen(column),\n        'rdg-last--frozen': lastFrozenColumnIndex === idx,\n        'row-selected': isRowSelected,\n        'has-tooltip': !!tooltip,\n        'rdg-child-cell': expandableOptions && expandableOptions.subRowDetails && expandableOptions.treeDepth > 0\n      }\n    );\n  }\n\n  checkScroll() {\n    const { scrollLeft, column } = this.props;\n    const node = this.cell.current;\n    if (isFrozen(column) && node && node.style.transform != null) {\n      this.setScrollLeft(scrollLeft);\n    }\n  }\n\n  setScrollLeft(scrollLeft: number) {\n    const node = this.cell.current;\n    if (node) {\n      node.style.transform = `translateX(${scrollLeft}px)`;\n    }\n  }\n\n  removeScroll() {\n    const node = this.cell.current;\n    if (node) {\n      node.style.transform = 'none';\n    }\n  }\n\n  getEvents() {\n    const { column, cellMetaData, idx, rowIdx, rowData } = this.props;\n    const columnEvents = column.events;\n    const allEvents: { [key: string]: Function } = {\n      onClick: this.handleCellClick,\n      onMouseDown: this.handleCellMouseDown,\n      onMouseEnter: this.handleCellMouseEnter,\n      onDoubleClick: this.handleCellDoubleClick,\n      onContextMenu: this.handleCellContextMenu,\n      onDragOver: this.handleDragOver\n    };\n\n    if (!columnEvents) {\n      return allEvents;\n    }\n\n    for (const event in columnEvents) {\n      const columnEventHandler = columnEvents[event];\n      if (columnEventHandler) {\n        const eventInfo: ColumnEventInfo<R> = {\n          idx,\n          rowIdx,\n          column,\n          rowId: rowData[cellMetaData.rowKey]\n        };\n        if (allEvents.hasOwnProperty(event)) {\n          const existingEvent = allEvents[event];\n          allEvents[event] = (e: Event) => {\n            existingEvent(e);\n            columnEventHandler(e, eventInfo);\n          };\n        } else {\n          allEvents[event] = (e: Event) => {\n            columnEventHandler(e, eventInfo);\n          };\n        }\n      }\n    }\n\n    return allEvents;\n  }\n\n  render() {\n    const { column, children, expandableOptions, cellMetaData, rowData } = this.props;\n    if (column.hidden) {\n      return null;\n    }\n\n    const style = this.getStyle();\n    const className = this.getCellClass();\n    const cellContent = children || <CellContent<R> {...this.props} />;\n    const events = this.getEvents();\n    const cellExpander = expandableOptions && expandableOptions.canExpand && (\n      <CellExpand\n        expanded={expandableOptions.expanded}\n        onCellExpand={this.handleCellExpand}\n      />\n    );\n\n    return (\n      <div\n        ref={this.cell}\n        className={className}\n        style={style}\n        {...events}\n      >\n        <CellActions<R>\n          column={column}\n          rowData={rowData}\n          cellMetaData={cellMetaData}\n        />\n        {cellExpander}\n        {cellContent}\n      </div>\n    );\n  }\n}\n"]}