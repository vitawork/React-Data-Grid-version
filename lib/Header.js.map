{"version":3,"file":"Header.js","sourceRoot":"","sources":["../src/Header.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\n\nimport HeaderRow from './HeaderRow';\nimport { resizeColumn } from './ColumnMetrics';\nimport getScrollbarSize from './getScrollbarSize';\nimport { HeaderRowType } from './common/enums';\nimport { CalculatedColumn, ColumnMetrics } from './common/types';\nimport { GridProps } from './Grid';\n\ntype SharedGridProps<R> = Pick<GridProps<R>,\n'columnMetrics'\n| 'onColumnResize'\n| 'rowHeight'\n| 'totalWidth'\n| 'headerRows'\n| 'sortColumn'\n| 'sortDirection'\n| 'draggableHeaderCell'\n| 'onSort'\n| 'onHeaderDrop'\n| 'getValidFilterValues'\n| 'cellMetaData'\n>;\n\nexport type HeaderProps<R> = SharedGridProps<R>;\n\ninterface State<R> {\n  resizing: { column: CalculatedColumn<R>; columnMetrics: ColumnMetrics<R> } | null;\n}\n\nexport default class Header<R> extends React.Component<HeaderProps<R>, State<R>> {\n  readonly state: Readonly<State<R>> = { resizing: null };\n\n  private readonly row = React.createRef<HeaderRow<R>>();\n  private readonly filterRow = React.createRef<HeaderRow<R>>();\n\n  componentWillReceiveProps(): void {\n    this.setState({ resizing: null });\n  }\n\n  onColumnResize = (column: CalculatedColumn<R>, width: number): void => {\n    const pos = this.getColumnPosition(column);\n\n    if (pos === null) return;\n\n    const prevColumnMetrics = this.state.resizing ? this.state.resizing.columnMetrics : this.props.columnMetrics;\n    const columnMetrics = resizeColumn({ ...prevColumnMetrics }, pos, width);\n\n    // we don't want to influence scrollLeft while resizing\n    if (columnMetrics.totalWidth < prevColumnMetrics.totalWidth) {\n      columnMetrics.totalWidth = prevColumnMetrics.totalWidth;\n    }\n\n    this.setState({\n      resizing: {\n        column: columnMetrics.columns[pos],\n        columnMetrics\n      }\n    });\n  };\n\n  onColumnResizeEnd = (column: CalculatedColumn<R>, width: number): void => {\n    const pos = this.getColumnPosition(column);\n    if (pos === null) return;\n    this.props.onColumnResize(pos, width || column.width);\n  };\n\n  getHeaderRows() {\n    const columnMetrics = this.getColumnMetrics();\n\n    return this.props.headerRows.map((row, index) => {\n      // To allow header filters to be visible\n      const isFilterRow = row.rowType === HeaderRowType.FILTER;\n      const rowHeight = isFilterRow ? '500px' : 'auto';\n      const scrollbarSize = getScrollbarSize() > 0 ? getScrollbarSize() : 0;\n      const updatedWidth = typeof this.props.totalWidth === 'number'\n        ? this.props.totalWidth - scrollbarSize\n        : this.props.totalWidth;\n      const headerRowStyle: React.CSSProperties = {\n        top: this.getCombinedHeaderHeights(index),\n        width: updatedWidth,\n        minHeight: rowHeight\n      };\n\n      return (\n        <HeaderRow<R>\n          key={row.rowType}\n          ref={isFilterRow ? this.filterRow : this.row}\n          rowType={row.rowType}\n          style={headerRowStyle}\n          onColumnResize={this.onColumnResize}\n          onColumnResizeEnd={this.onColumnResizeEnd}\n          width={columnMetrics.width}\n          height={row.height || this.props.rowHeight}\n          columns={columnMetrics.columns}\n          draggableHeaderCell={this.props.draggableHeaderCell}\n          filterable={row.filterable}\n          onFilterChange={row.onFilterChange}\n          onHeaderDrop={this.props.onHeaderDrop}\n          sortColumn={this.props.sortColumn}\n          sortDirection={this.props.sortDirection}\n          onSort={this.props.onSort}\n          getValidFilterValues={this.props.getValidFilterValues}\n        />\n      );\n    });\n  }\n\n  getColumnMetrics(): ColumnMetrics<R> {\n    if (this.state.resizing) {\n      return this.state.resizing.columnMetrics;\n    }\n    return this.props.columnMetrics;\n  }\n\n  getColumnPosition(column: CalculatedColumn<R>): number | null {\n    const { columns } = this.getColumnMetrics();\n    const idx = columns.findIndex(c => c.key === column.key);\n    return idx === -1 ? null : idx;\n  }\n\n  getCombinedHeaderHeights(until?: number): number {\n    const stopAt = typeof until === 'number'\n      ? until\n      : this.props.headerRows.length;\n\n    let height = 0;\n    for (let index = 0; index < stopAt; index++) {\n      height += this.props.headerRows[index].height || this.props.rowHeight;\n    }\n    return height;\n  }\n\n  setScrollLeft(scrollLeft: number): void {\n    const node = ReactDOM.findDOMNode(this.row.current) as Element;\n    node.scrollLeft = scrollLeft;\n    this.row.current!.setScrollLeft(scrollLeft);\n    if (this.filterRow.current) {\n      const nodeFilters = ReactDOM.findDOMNode(this.filterRow.current) as Element;\n      nodeFilters.scrollLeft = scrollLeft;\n      this.filterRow.current.setScrollLeft(scrollLeft);\n    }\n  }\n\n  // Set the cell selection to -1 x -1 when clicking on the header\n  onHeaderClick = (): void => {\n    this.props.cellMetaData.onCellClick({ rowIdx: -1, idx: -1 });\n  };\n\n  render() {\n    const className = classNames('react-grid-Header', {\n      'react-grid-Header--resizing': !!this.state.resizing\n    });\n\n    return (\n      <div\n        style={{ height: this.getCombinedHeaderHeights() }}\n        className={className}\n        onClick={this.onHeaderClick}\n      >\n        {this.getHeaderRows()}\n      </div>\n    );\n  }\n}\n"]}