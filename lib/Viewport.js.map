{"version":3,"file":"Viewport.js","sourceRoot":"","sources":["../src/Viewport.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Canvas from './Canvas';\nimport {\n  getGridState,\n  getColOverscanEndIdx,\n  getVisibleBoundaries,\n  getScrollDirection,\n  getRowOverscanStartIdx,\n  getRowOverscanEndIdx,\n  getColOverscanStartIdx,\n  getNonFrozenVisibleColStartIdx,\n  getNonFrozenRenderedColumnCount,\n  findLastFrozenColumnIndex\n} from './utils/viewportUtils';\nimport { GridProps } from './Grid';\nimport { ScrollPosition } from './common/types';\nimport { SCROLL_DIRECTION } from './common/enums';\n\ninterface ScrollParams {\n  height: number;\n  scrollTop: number;\n  scrollLeft: number;\n  rowsCount: number;\n  rowHeight: number;\n}\n\nexport interface ScrollState {\n  height: number;\n  scrollTop: number;\n  scrollLeft: number;\n  rowVisibleStartIdx: number;\n  rowVisibleEndIdx: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  colVisibleStartIdx: number;\n  colVisibleEndIdx: number;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  scrollDirection: SCROLL_DIRECTION;\n  lastFrozenColumnIndex: number;\n  isScrolling: boolean;\n}\n\ntype SharedGridProps<R> = Pick<GridProps<R>,\n'rowKey'\n| 'rowHeight'\n| 'rowRenderer'\n| 'rowGetter'\n| 'rowsCount'\n| 'selectedRows'\n| 'columnMetrics'\n| 'totalWidth'\n| 'cellMetaData'\n| 'rowOffsetHeight'\n| 'minHeight'\n| 'scrollToRowIndex'\n| 'contextMenu'\n| 'rowSelection'\n| 'getSubRowDetails'\n| 'rowGroupRenderer'\n| 'enableCellSelect'\n| 'enableCellAutoFocus'\n| 'cellNavigationMode'\n| 'eventBus'\n| 'interactionMasksMetaData'\n| 'RowsContainer'\n| 'editorPortalTarget'\n>;\n\nexport interface ViewportProps<R> extends SharedGridProps<R> {\n  onScroll(scrollState: ScrollState): void;\n}\n\nexport interface ViewportState {\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  rowVisibleStartIdx: number;\n  rowVisibleEndIdx: number;\n  height: number;\n  scrollTop: number;\n  scrollLeft: number;\n  colVisibleStartIdx: number;\n  colVisibleEndIdx: number;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  isScrolling: boolean;\n  lastFrozenColumnIndex: number;\n}\n\nexport default class Viewport<R> extends React.Component<ViewportProps<R>, ViewportState> {\n  static displayName = 'Viewport';\n\n  readonly state: Readonly<ViewportState> = getGridState(this.props);\n  private readonly canvas = React.createRef<Canvas<R>>();\n  private readonly viewport = React.createRef<HTMLDivElement>();\n  private resetScrollStateTimeoutId: number | null = null;\n\n  onScroll = ({ scrollTop, scrollLeft }: ScrollPosition) => {\n    const { rowHeight, rowsCount, onScroll } = this.props;\n    const nextScrollState = this.updateScroll({\n      scrollTop,\n      scrollLeft,\n      height: this.state.height,\n      rowHeight,\n      rowsCount\n    });\n\n    onScroll(nextScrollState);\n  };\n\n  getScroll() {\n    return this.canvas.current!.getScroll();\n  }\n\n  setScrollLeft(scrollLeft: number) {\n    this.canvas.current!.setScrollLeft(scrollLeft);\n  }\n\n  getDOMNodeOffsetWidth() {\n    return this.viewport.current ? this.viewport.current.offsetWidth : 0;\n  }\n\n  clearScrollTimer() {\n    if (this.resetScrollStateTimeoutId !== null) {\n      window.clearTimeout(this.resetScrollStateTimeoutId);\n    }\n  }\n\n  getNextScrollState({ scrollTop, scrollLeft, height, rowHeight, rowsCount }: ScrollParams): ScrollState {\n    const isScrolling = true;\n    const { columns } = this.props.columnMetrics;\n    const scrollDirection = getScrollDirection(this.state, scrollTop, scrollLeft);\n    const { rowVisibleStartIdx, rowVisibleEndIdx } = getVisibleBoundaries(height, rowHeight, scrollTop, rowsCount);\n    const rowOverscanStartIdx = getRowOverscanStartIdx(scrollDirection, rowVisibleStartIdx);\n    const rowOverscanEndIdx = getRowOverscanEndIdx(scrollDirection, rowVisibleEndIdx, rowsCount);\n    const totalNumberColumns = columns.length;\n    const lastFrozenColumnIndex = findLastFrozenColumnIndex(columns);\n    const nonFrozenColVisibleStartIdx = getNonFrozenVisibleColStartIdx(columns, scrollLeft);\n    const nonFrozenRenderedColumnCount = getNonFrozenRenderedColumnCount(this.props.columnMetrics, this.getDOMNodeOffsetWidth(), scrollLeft);\n    const colVisibleEndIdx = Math.min(nonFrozenColVisibleStartIdx + nonFrozenRenderedColumnCount, totalNumberColumns);\n    const colOverscanStartIdx = getColOverscanStartIdx(scrollDirection, nonFrozenColVisibleStartIdx, lastFrozenColumnIndex);\n    const colOverscanEndIdx = getColOverscanEndIdx(scrollDirection, colVisibleEndIdx, totalNumberColumns);\n    return {\n      height,\n      scrollTop,\n      scrollLeft,\n      rowVisibleStartIdx,\n      rowVisibleEndIdx,\n      rowOverscanStartIdx,\n      rowOverscanEndIdx,\n      colVisibleStartIdx: nonFrozenColVisibleStartIdx,\n      colVisibleEndIdx,\n      colOverscanStartIdx,\n      colOverscanEndIdx,\n      scrollDirection,\n      lastFrozenColumnIndex,\n      isScrolling\n    };\n  }\n\n  resetScrollStateAfterDelay() {\n    this.clearScrollTimer();\n    this.resetScrollStateTimeoutId = window.setTimeout(\n      this.resetScrollStateAfterDelayCallback,\n      500\n    );\n  }\n\n  resetScrollStateAfterDelayCallback = () => {\n    this.resetScrollStateTimeoutId = null;\n    this.setState({ isScrolling: false });\n  };\n\n  updateScroll(scrollParams: ScrollParams) {\n    this.resetScrollStateAfterDelay();\n    const nextScrollState = this.getNextScrollState(scrollParams);\n    this.setState(nextScrollState);\n    return nextScrollState;\n  }\n\n  metricsUpdated = () => {\n    if (!this.viewport.current) {\n      return;\n    }\n\n    const { height } = this.viewport.current.getBoundingClientRect();\n\n    if (height) {\n      const { scrollTop, scrollLeft } = this.state;\n      const { rowHeight, rowsCount } = this.props;\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n    }\n  };\n\n  componentWillReceiveProps(nextProps: ViewportProps<R>) {\n    const { rowHeight, rowsCount } = nextProps;\n    if (this.props.rowHeight !== nextProps.rowHeight\n      || this.props.minHeight !== nextProps.minHeight) {\n      const { scrollTop, scrollLeft, height } = getGridState(nextProps);\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n    } else if (this.props.columnMetrics.columns.length !== nextProps.columnMetrics.columns.length) {\n      this.setState(getGridState(nextProps));\n    } else if (this.props.rowsCount !== nextProps.rowsCount) {\n      const { scrollTop, scrollLeft, height } = this.state;\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n      // Added to fix the hiding of the bottom scrollbar when showing the filters.\n    } else if (this.props.rowOffsetHeight !== nextProps.rowOffsetHeight) {\n      const { scrollTop, scrollLeft } = this.state;\n      // The value of height can be positive or negative and will be added to the current height to cater for changes in the header height (due to the filer)\n      const height = this.state.height + this.props.rowOffsetHeight - nextProps.rowOffsetHeight;\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.metricsUpdated);\n    this.metricsUpdated();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.metricsUpdated);\n    this.clearScrollTimer();\n  }\n\n  render() {\n    return (\n      <div\n        className=\"rdg-viewport\"\n        style={{ top: this.props.rowOffsetHeight }}\n        ref={this.viewport}\n      >\n        <Canvas<R>\n          ref={this.canvas}\n          rowKey={this.props.rowKey}\n          totalWidth={this.props.totalWidth}\n          width={this.props.columnMetrics.width}\n          totalColumnWidth={this.props.columnMetrics.totalColumnWidth}\n          rowGetter={this.props.rowGetter}\n          rowsCount={this.props.rowsCount}\n          selectedRows={this.props.selectedRows}\n          columns={this.props.columnMetrics.columns}\n          rowRenderer={this.props.rowRenderer}\n          rowOverscanStartIdx={this.state.rowOverscanStartIdx}\n          rowOverscanEndIdx={this.state.rowOverscanEndIdx}\n          rowVisibleStartIdx={this.state.rowVisibleStartIdx}\n          rowVisibleEndIdx={this.state.rowVisibleEndIdx}\n          colVisibleStartIdx={this.state.colVisibleStartIdx}\n          colVisibleEndIdx={this.state.colVisibleEndIdx}\n          colOverscanStartIdx={this.state.colOverscanStartIdx}\n          colOverscanEndIdx={this.state.colOverscanEndIdx}\n          lastFrozenColumnIndex={this.state.lastFrozenColumnIndex}\n          cellMetaData={this.props.cellMetaData}\n          height={this.state.height}\n          rowHeight={this.props.rowHeight}\n          onScroll={this.onScroll}\n          scrollToRowIndex={this.props.scrollToRowIndex}\n          contextMenu={this.props.contextMenu}\n          rowSelection={this.props.rowSelection}\n          getSubRowDetails={this.props.getSubRowDetails}\n          rowGroupRenderer={this.props.rowGroupRenderer}\n          isScrolling={this.state.isScrolling}\n          enableCellSelect={this.props.enableCellSelect}\n          enableCellAutoFocus={this.props.enableCellAutoFocus}\n          cellNavigationMode={this.props.cellNavigationMode}\n          eventBus={this.props.eventBus}\n          RowsContainer={this.props.RowsContainer}\n          editorPortalTarget={this.props.editorPortalTarget}\n          interactionMasksMetaData={this.props.interactionMasksMetaData}\n        />\n      </div>\n    );\n  }\n}\n"]}